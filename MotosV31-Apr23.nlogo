extensions [nw csv]

breed [persons person]


patches-own
[
 socioec-level

 ]


persons-own
[
  age           ; Model creates people between 0 and 80 years. Motorcycle ownership applies for people between 15 and 60.
  gender        ; 1- male; 2- female
  socioeconomic-sit ;socio-economic status 1-low, 2-middle, 3-high
  household     ; patche (neighborhood) with a specific socio-economic level
  workplace     ; patche (office)
  speed         ; speed of travel when people commute
  car-owner     ; 1-yes, 0-no
  moto-owner    ; 1-yes, 0-no
  moto-tech     ; 1-gasoline, 2-electric
  moto-age      ; 1 a 40 years ; each city has a distribution (updated with Cali info)
  transport-mode; 1-motorcycle, 2-car, 3-public
  uncertainty-threshold   ; level of uncertaintiy tolerated
  satisfaction-threshold  ; satisfaction level desired
  w-buy w-ope w-saf w-sec w-com w-tim w-pol ; weights (level of importance) for attributes of transport modes buy= purchase, ope= operation, saf= safety, sec = security, com= comfort, tim= time travel, pol=pollution
  satisfaction    ; calculated in every period of decision according to needs satisfied with transport modes
  uncertainty     ; calculated in every period of decision according to the experience with transport modes
  experience-mot  ; # of times that motorcycle has been selected
  experience-car  ; # of times that car mode has been selected
  experience-pub  ; # of times that public transport has been selected
  type-choice     ; according to the CONSUMAT model "repetition", "imitation", "deliberation", "inquiring"
  average-km      ; average daily distance traveled
  costv-mot       ; variable cost if the person is using a motorcycle
  costv-car       ; variable cost if the person is using a car
  safety          ; 1= accident, 0= no accident
  security        ; 1= security incident, 0= no security incident
  safety-mot      ; moto safety score used for satisfaction function
  safety-car      ; car safety score used for satisfaction function
  safety-pub      ; public transport safety score used for satisfaction function
  security-mot    ; moto security score used for satisfaction function
  security-car    ; car security score used for satisfaction function
  security-pub    ; public transport security score used for satisfaction function
  comfort-mot     ; comfort percepction towards motorcycles
  comfort-car     ; comfort percepction towards cars
  comfort-pub     ; comfort percepction towards public transport
  comfort         ; level of comfort perception towards current mode
  time-m          ; time of travel if the person is using a motorcycle
  time-c          ; time of travel if the person is using a car
  time-p          ; time of travel if the person is using public transportation
  time            ; time of travel with the current mode
  pollution       ; pollution generated by the current transport mode
  ;path            ; the route that person follows to get to the workplace
  satisfaction-mot; travel satisfaction if the person is using a motorcycle
  satisfaction-car; travel satisfaction if the person is using a car
  satisfaction-pub; travel satisfaction if the person is using public transportation
  utility         ; intermidiate calculation of satisfaction by decision-maker type

]



globals
[
  satisfaction-mean
  total-repeat total-imita total-delib total-inquiry  ; # of persons in each type of choice according CONSUMAT
  cost-buy-mot cost-buy-car cost-buy-pub              ; score for acquisition value used for satisfaction function
  costf-op-mot costf-op-car costf-op-pub              ; score for fixed operating cost of transport modes (fixed: insurance, taxes, etc )
  costv-op-mot costv-op-car                           ; score for variable operating cost of transport modes (variables: gasoline)
  cost-op-mot  cost-op-car  cost-op-pub               ; score for total operating cost of transport modes (combination of variable and fixed)

  ;comfort-mot comfort-car comfort-pub                ; (less comfort: bus- crowded moto-weather)
  time-mot time-car time-pub                          ; travel time (affected by congestion)
 ; pollution-mot pollution-car pollution-pub           ; standard CO2 emmissions per kilometer by mode (emission/km)
  pollution-tot                                       ; Sum of pollution of the complete system
  tot-acc-mot tot-acc-car tot-acc-pub                 ; number of accidents (acc/ year)
  acc-mot-nf acc-car-nf acc-pub-nf                    ; number of non-fatal accidents (acc/ year)
  acc-mot-f acc-car-f acc-pub-f                       ; number of fatal accidents (acc/ year)
  gas-price        ; gasoline price ($/galon)
  eff-mot eff-car  ; efficiency kms/gallon of transport modes
  speed-m          ; average speed of motorcycles
  speed-c          ; average speed of cars
  speed-p          ; average speed of public transport
  speed-mot        ; moto speed affected by congestion
  speed-car        ; car speed affected by congestion
  speed-pub        ; public transp speed affected by congestion
  acc-rate-mot     ; accident rate for motorcycles
  acc-rate-car     ; accident rate for cars
  acc-rate-pub     ; accident rate for public transport
  emi-mot          ; standard CO2 emissions motos
  emi-car          ; standard CO2 emissions cars
  emi-pub          ; standard CO2 emissions pub
  insecur-m        ; insecurity rate for motorcycles
  insecur-c        ; insecurity rate for cars
  insecur-p        ; insecurity rate for public transport
  sec-percep-fem   ; security perception female
  est-1            ; Percentange of population in socioeconomic level 1
  est-2            ; Percentange of population in socioeconomic level 2
  est-3            ; Percentange of population in socioeconomic level 3
  male-est1        ; % males motorcyclists in socioeconomic level 1
  fema-est1        ; % females motorcyclists in socioeconomic level 1
  male-est2        ; % males motorcyclists in socioeconomic level 2
  fema-est2        ; % females motorcyclists in socioeconomic level 2
  male-est3        ; % males motorcyclists in socioeconomic level 3
  fema-est3        ; % females motorcyclists in socioeconomic level 3
  data             ; list with parameters imported from csv
  population-rate       ; rate of new people with 15 years at each tick
]


to setup
  ca
 ;RANDOM-seed 1 ;randomseedvariable
  set data csv:from-file "Datos.csv" ; imports values for parameters

  setup-patches
  setup-persons
  setup-transports

  nw:save-matrix "matrix-0.csv"
    csv:to-file "results-0.csv" [ (list who transport-mode age gender socioeconomic-sit household workplace link-neighbors satisfaction satisfaction-mot satisfaction-car satisfaction-pub cost-buy-car cost-op-car safety-car security-car comfort-car time-car pollution-tot nw:betweenness-centrality) ] of persons

  reset-ticks
end

to go

  If ticks = Time-simulation * 31 [stop]

  commute

  if ticks > 1 [
  if (ticks mod (30) = 0.000)

  [

  update-safety          ; calculates number of accidents
  update-security        ; calculates security incidents
  update-scores-tech-attributes ; calulates values for tech attributes to be used in satisfaction update for each agent in every decision tick
  update-satisfaction    ; updates values of satisfcation for each agent in every tick
  update-experience      ; number of times that a person has chosen every transport mode over the time steps
  update-uncertainty     ; updates uncertainty level for each agent in every tick
  ;if ticks = 30
  update-type-choice     ; according to satisfaction and uncertainty applies the decision making rule
  choice                 ; Breaks population into groups according to their type of choice: "repetition", "imitation", "deliberation", "inquiring"
  update-ownership       ; uptades car or motrocycle ownership depending on mode choice
  update-age-moto        ; updates motrocycle age
  update-age-people      ; updates people age
  assign-moto            ; to assign moto to new 16 years old people
  set-moto-tech          ; to assign moto tech to new 16 years old people
  set-transport-mode     ; to assign transport mode to new 16 years old people

  commute

  ask persons [move-to household]

  population-growth
  ;people-die

  create-csv             ; allows to extract network matrix and nodes' atttibutes to csv files

  ]
  ]


  tick

  indicators

end


to setup-patches ; distributes space according to the socioeconomic situation, creating neighborhoods and workplaces

  ; comercial/industrial areas
  ask patches with [pxcor >= -2 AND pxcor <= 2 AND pycor >= -8 AND pycor <= -4]
   [set pcolor black]

  ; roads
 ; ask patches with [pxcor = 0 AND pycor <= -3] [set pcolor yellow]
 ; ask patches with [pxcor = 0 AND pycor >=  3] [set pcolor yellow]
 ; ask patches with [pycor = 0 AND pxcor <= -3] [set pcolor yellow]
 ; ask patches with [pycor = 0 AND pxcor >=  3] [set pcolor yellow]

  ;ask patches with [pxcor <  -2 OR pxcor >  2 OR pycor <  -2 OR pycor >  2]
  ;[set socioec-level (1 + random 3)]
  ;ask patches with [socioec-level = 1] [set pcolor cyan]   ; 1: low    (includes socioeconomic-sit 1 y 2)
  ;ask patches with [socioec-level = 2] [set pcolor sky]    ; 2: middle (includes socioeconomic-sit 3 y 4)
  ;ask patches with [socioec-level = 3] [set pcolor blue]   ; 3: high   (includes socioeconomic-sit 5 y 6)

  ; neighborhoods
  ask patches with [(pxcor >= 3 AND pycor <= 1 AND pycor >= -5 ) OR (pycor >= 0 AND pycor <= 2 AND pxcor <= -7) OR (pycor <= 3 AND pycor >= 2 AND pxcor <= 6) OR (pxcor >= 1 AND pxcor <= 2 AND pycor >= -2 AND pycor <= 1) OR
    (pycor >= 7 AND pxcor <= -6 ) OR (pycor >= 6 AND pxcor >= 7) OR (pxcor >= 4 AND pxcor <= 6 AND pycor >= 7) OR (pxcor >= 3 AND pxcor <= 6 AND pycor = 9) OR (pxcor >= 7 AND pycor <= 3 AND pycor >= 2)]
   [set socioec-level 1 set pcolor cyan] ; areas with socioeconomic level 1
  ask patches with [(pxcor >= -5 AND pxcor <= 6 AND pycor >= 2 AND pycor <= 6 ) OR (pxcor <= -6  AND pycor >= 3 AND pycor <= 5) OR (pxcor <= -6 AND pycor >= -7 AND pycor <= -1 )
    OR (pxcor <= 3 AND pxcor >= 1 AND pycor >= 7 AND pycor <= 8 ) OR (pxcor >= 7 AND pycor >= 4 AND pycor <= 5 ) OR (pxcor >= -5 AND pxcor <= 0 AND pycor >= -2 AND pycor <= 1 ) OR (pxcor >= -5 AND pxcor <= 6 AND pycor >= 2 AND pycor <= 6 ) OR
    (pxcor >= -5 AND pxcor <= -3 AND pycor = -3 ) OR (pxcor = -6 AND pycor <= 2 AND pycor >= 0 ) ]
   [set socioec-level 2 set pcolor sky] ; areas with socioeconomic level 2
  ask patches with [ (pxcor >= 3 AND pycor <= -6) OR (pxcor >= -5 AND pxcor <= -3 AND pycor <= -4) OR (pxcor >= -2 AND pxcor <= 2 AND pycor = -9) or (pycor <= -8 AND pxcor <= -6 ) OR (pycor = -3  AND pxcor <= 2 AND pxcor >= -2) OR
    (pycor = 9 AND pxcor <= 2 AND pxcor >= -5 ) OR (pxcor <= 0 AND pxcor >= -5  AND pycor >= 7) OR (pycor = 6 AND pxcor <= -6)]
   [set socioec-level 3 set pcolor 103] ; areas with socioeconomic level 3


end


to setup-persons

 ; nw:generate-preferential-attachment persons links Population 3  ; scale free network (mínimo grado de nodos)
 ; nw:generate-watts-strogatz persons links Population 6 0.8 ; [ fd 10 ]
 ; nw:generate-random persons links Population 0.5


 ; nw:generate-preferential-attachment (persons with [socioeconomic-sit = 1]) links Population 3



  create-persons Population
  set-age
  set-gender
  set-socioeconomic-sit

  ask persons [
    set shape "person"
    set size 0.3]

ask (persons with [socioeconomic-sit = 1]) [
    create-links-with n-of 2 other (persons with [socioeconomic-sit = 1])
  let new-node one-of [ both-ends ] of one-of links
    let new-link-neighbors n-of (3 / count (persons with [socioeconomic-sit != 1])) (persons with [socioeconomic-sit != 1])
    ask new-link-neighbors [
      create-link-with new-node
    ]

;   let new-node-all one-of [ both-ends ] of one-of links
 ;   let new-link-neighbors-all n-of (2 / count persons with [socioeconomic-sit != 1]) (persons with [socioeconomic-sit != 1])
 ;   ask new-link-neighbors-all [
 ;     create-link-with new-node-all
 ; ]
  ]

   ask (persons with [socioeconomic-sit = 2]) [
    create-links-with n-of 2 other (persons with [socioeconomic-sit = 2])
  let new-node one-of [ both-ends ] of one-of links
    let new-link-neighbors n-of (3 / count (persons with [socioeconomic-sit != 2])) (persons with [socioeconomic-sit != 2])
    ask new-link-neighbors [
      create-link-with new-node
  ]

  ; let new-node-all one-of [ both-ends ] of one-of links
  ;  let new-link-neighbors-all n-of (2 / count persons with [socioeconomic-sit != 2]) (persons with [socioeconomic-sit != 2])
  ;  ask new-link-neighbors-all [
  ;    create-link-with new-node-all
  ;  ]

  ]


  ask (persons with [socioeconomic-sit = 3]) [
    create-links-with n-of 2 other (persons with [socioeconomic-sit = 3])
  let new-node one-of [ both-ends ] of one-of links
  let new-link-neighbors n-of (3 / count (persons with [socioeconomic-sit != 3])) (persons with [socioeconomic-sit != 3])
   ; if new-node != [who] of persons with [socioeconomic-sit = 3]
    ask new-link-neighbors [
      create-link-with new-node
  ]


  ; let new-node-all one-of [ both-ends ] of one-of links
  ;  let new-link-neighbors-all n-of (2 / count persons with [socioeconomic-sit != 3]) (persons with [socioeconomic-sit != 3])
  ;  ask new-link-neighbors-all [
   ;   create-link-with new-node-all
  ;]
]

  ; let new-node-all one-of [ both-ends ] of one-of links
  ;  let new-link-neighbors-all n-of (2 / count persons ) (other persons )
  ;  ask new-link-neighbors-all [
   ;   create-link-with new-node-all
  ;]

  ; Small world connections among the thre socioeconomic groups

 ; ask links [

 ;   let new-nodeA1 one-of persons with [socioeconomic-sit  = 1]
 ;   let new-nodeB1 one-of persons with [socioeconomic-sit != 1 and (self != new-nodeA1) and (not link-neighbor? new-nodeA1) ]
 ;   if (random-float 1) < 0.05 * (count persons with [socioeconomic-sit = 1]) / (count persons) ;gives less connections to smaller groups
 ;   [ask new-nodeA1 [create-link-with new-nodeB1]]


  ;   let new-nodeA2 one-of persons with [socioeconomic-sit  = 2]
  ;   let new-nodeB2 one-of persons with [socioeconomic-sit != 2 and (self != new-nodeA2) and (not link-neighbor? new-nodeA2) ]
  ;   if (random-float 1) < 0.05 * (count persons with [socioeconomic-sit = 2]) / (count persons)
  ;   [ask new-nodeA2 [create-link-with new-nodeB2]]

  ;   let new-nodeA3 one-of persons with [socioeconomic-sit = 3]
  ;   let new-nodeB3 one-of persons with [socioeconomic-sit != 3 and (self != new-nodeA3) and (not link-neighbor? new-nodeA3) ]
  ;   if (random-float 1) < 0.05 * (count persons with [socioeconomic-sit = 3]) / (count persons)
  ;   [ask new-nodeA3 [create-link-with new-nodeB3]]

; ]




  ask links [ ;connect the most connected withing groups with members in the other groups

    let new-nodeA1 max-one-of persons with [socioeconomic-sit  = 1] [count link-neighbors]
    let new-nodeB1 one-of persons with [socioeconomic-sit != 1 and (self != new-nodeA1) and (not link-neighbor? new-nodeA1) ]
    if (random-float 1) < 0.05 * (count persons with [socioeconomic-sit = 1]) / (count persons) ;gives less connections to smaller groups
    [ask new-nodeA1 [create-link-with new-nodeB1]]


    let new-nodeA2 max-one-of persons with [socioeconomic-sit  = 2] [count link-neighbors]
    let new-nodeB2 one-of persons with [socioeconomic-sit != 2 and (self != new-nodeA2) and (not link-neighbor? new-nodeA2) ]
    if (random-float 1) < 0.05 * (count persons with [socioeconomic-sit = 2]) / (count persons)
    [ask new-nodeA2 [create-link-with new-nodeB2]]

    let new-nodeA3 max-one-of persons with [socioeconomic-sit = 3] [count link-neighbors]
    let new-nodeB3 one-of persons with [socioeconomic-sit != 3 and (self != new-nodeA3) and (not link-neighbor? new-nodeA3) ]
    if (random-float 1) < 0.05 * (count persons with [socioeconomic-sit = 3]) / (count persons)
    [ask new-nodeA3 [create-link-with new-nodeB3]]

]




   ask links [ set hidden? true]

 ; ask persons [
;  create-link-with one-of other persons
;  let new-node one-of [ both-ends ] of one-of links
 ;   let new-link-neighbors n-of (3 / count turtles) turtles
;    ask new-link-neighbors [
;      create-link-with new-node
;  ]]


 ;let new-nodeA n-of (0.03 * count persons with [ socioeconomic-sit = 1]) (persons with [ socioeconomic-sit = 1])
 ;   ask new-nodes [create-links-with n-of (0.001 * (count persons with [socioeconomic-sit = 2 or socioeconomic-sit = 3 and self != my-links])) (persons with [socioeconomic-sit = 2 or socioeconomic-sit = 3 and self != my-links])



  set-neighborhood
  set-workplace
  assign-moto
  set-transport-mode
  set-uncertainty-threshold
  set-satisfaction-threshold
  set-weights
  set-speed
  set-average-km

end


to setup-transports

  set-moto-age
  set-moto-tech
  set-transp-attributes
end



;PROCEDURES RELATED TO SETUP-PERSONS

to set-age ; Parametrization according to the Census Data of the city. Source: DANE


  let age-r1  first (item 9  data)
  let age-r2  first (item 10 data)
  let age-r3  first (item 48 data)
  let age-r4  first (item 49 data)
  let age-r5  first (item 50 data)
  let age-r6  first (item 51 data)
  let age-r7  first (item 52 data)
  let age-r8  first (item 53 data)
  let age-r9  first (item 54 data)
  let age-r10 first (item 55 data)

  let number1 int (age-r1  * Population) ; 15-19 years
  ask n-of number1 persons with [age = 0] [ set age (15 + random 5)]

  let number2 int (age-r2  * Population) ; 20-24 years
  ask n-of number2 persons with [age = 0] [ set age (20 + random 5)]

  let number3 int (age-r3  * Population) ; 25-29 years
  ask n-of number3 persons with [age = 0] [ set age (25 + random 5)]

  let number4 int (age-r4  * Population) ; 30-34 years
  ask n-of number4 persons with [age = 0] [ set age (30 + random 5)]

  let number5 int (age-r5  * Population) ; 35-39 years
  ask n-of number5 persons with [age = 0] [ set age (35 + random 5)]

  let number6 int (age-r6  * Population) ; 40-44 years
  ask n-of number6 persons with [age = 0] [ set age (40 + random 5)]

  let number7 int (age-r7  * Population) ; 45-49 years
  ask n-of number7 persons with [age = 0] [ set age (45 + random 5)]

  let number8 int (age-r8  * Population) ; 50-54 years
  ask n-of number8 persons with [age = 0] [ set age (50 + random 5)]

  let number9 int (age-r9  * Population) ; 55-59 years
  ask n-of number9 persons with [age = 0] [ set age (55 + random 5)]

  let number10 int (age-r10 * Population) ; 60-64 years
  ask n-of number10 persons with [age = 0] [ set age (60 + random 5)]

  ask persons with [age = 0] ; 65 to 69 years
  [ set age (65 + random 5 )] ;
end

to set-gender ; gender (according to the census data of the city) 1= hombre, 2= mujer
  ask persons [set gender 1]
  let number int(female-percentage * Population)
  ask n-of number persons [set gender 2 ]
end

to set-socioeconomic-sit ; (Distribution according to the census data of the city)

  set est-1 first (item 11  data)
  set est-2 first (item 12  data)
  set est-3 first (item 13  data)

  let number int(est-1 * Population)
   ask n-of number  persons with [socioeconomic-sit = 0] [set socioeconomic-sit 1 ]

  let number1 int(est-2 * Population)
   ask n-of number1 persons with [socioeconomic-sit = 0] [set socioeconomic-sit 2 ]

  ask persons with [socioeconomic-sit = 0] [set socioeconomic-sit 3 ]
end

to set-neighborhood ; distributes a patch as neighborhood where people live

  ask persons with [socioeconomic-sit = 1 ]
  [move-to one-of patches with [socioec-level = 1]]
  ask persons with [socioeconomic-sit = 2 ]
  [move-to one-of patches with [socioec-level = 2]]
  ask persons with [socioeconomic-sit = 3 ]
  [move-to one-of patches with [socioec-level = 3]]

  ask persons [set household patch-here]
end

to set-workplace ;set one office
  ask persons
  [set workplace one-of patches with [pcolor = black]
  face workplace

  ]

end

to assign-moto ; Selects people from different socio-economic status, gender and age range to assing a moto

 ; % of males and females with motorcycles according to the socioec level. Read from the csv file loaded to "data" list
  set male-est1 first (item 16 data)
  set male-est2 first (item 18 data)
  set male-est3 first (item 20 data)

  set fema-est1 first (item 17 data)
  set fema-est2 first (item 19 data)
  set fema-est3 first (item 21 data)


  ;For level 1
  ask persons with [socioeconomic-sit = 1 and transport-mode = 0 and age >= 15 and age <= 60][
    if gender = 1 and random-float 1 < male-est1 [set moto-owner 1]
    if gender = 2 and random-float 1 < fema-est1 [set moto-owner 1]
  ]

  ;For level 2
  ask persons with [socioeconomic-sit = 2 and transport-mode = 0 and age >= 15 and age <= 60][
    if gender = 1 and random-float 1 < male-est2 [set moto-owner 1]
    if gender = 2 and random-float 1 < fema-est2 [set moto-owner 1]
  ]

  ;For level 3
  ask persons with [socioeconomic-sit = 3 and transport-mode = 0 and age >= 15 and age <= 60][
    if gender = 1 and random-float 1 < male-est3 [set moto-owner 1]
    if gender = 2 and random-float 1 < fema-est3 [set moto-owner 1]
  ]

end

to set-transport-mode ; number of users that use each mode at the beggining of the simulation (moto= 1, car=2, public=3)

  let percentage-cars first (item 45 data)

  ask persons with [moto-owner = 1][set transport-mode 1 set color black]
  ask persons with [transport-mode = 0 ][
    let number random-float 1
    ifelse (number <= percentage-cars and age >= 15) ; assumption: 25% of population without motorcycle has a car and the rest of the peopole use public service
    [set transport-mode 2 set car-owner 1 set color red]
    [if age >= 15 [set transport-mode 3 set color blue]]
  ]
end

to set-uncertainty-threshold ; level of uncertainty regarding the transport mode that is accepted by persons
 ask persons
[let uncertain -1
  while [uncertain < 0 or uncertain > 1]
  [set uncertain random-normal Hofstede-uncertainty (Hofstede-uncertainty * deviation)] ; 20% Hofstede level of uncertainty accepted by Colombians
 set uncertainty-threshold uncertain]
end

to set-satisfaction-threshold ; level of satisfaction that people would like to have with their transport mode ;
 set satisfaction-mean first (item 47 data)

  ask persons
 ; [set satisfaction-threshold random-float 1]

 [let satisfact -1
 while [satisfact < 0 or satisfact > 1]
 [set satisfact random-normal satisfaction-mean deviation]
 set satisfaction-threshold satisfact]
end

to set-weights ; level of importance that people give to the transportation attibutes according their socio-economic situation

 ; assigns points for each atribute in low socio-economic status
   ask persons with [socioeconomic-sit = 1 ]
    [weights-socio-1]
 ; assigns points for each atribute in middle socio-economic status
   ask persons with [socioeconomic-sit = 2 ]
    [weights-socio-2]
 ; assigns points to people in high socio-economic status
   ask persons with [socioeconomic-sit = 3 ]
    [weights-socio-3]

   ; show [w-ope]  of persons

end

to weights-socio-1
    ; assigns points with a normal distribution for each attribute
    let points-buy -1
    while [points-buy < 0 or points-buy > 100]
    [set points-buy random-normal p-buy (p-buy * 0.1)]

    let points-ope -1
    while [points-ope < 0 or points-ope > 100]
    [set points-ope random-normal p-ope (p-ope * 0.1)]

    let points-saf -1
    while [points-saf < 0 or points-saf > 100]
    [set points-saf random-normal p-saf (p-saf * 0.1)]

    let points-sec -1
    while [points-sec < 0 or points-sec > 100]
    [set points-sec random-normal p-sec (p-sec * 0.1)]

    let points-com -1
    while [points-com < 0 or points-com > 100]
    [set points-com random-normal p-com (p-com * 0.1)]

    let points-tim -1
    while [points-tim < 0 or points-tim > 100]
    [set points-tim random-normal p-tim (p-tim * 0.1)]

    let points-pol -1
    while [points-pol < 0 or points-pol > 100]
    [set points-pol random-normal p-pol (p-pol * 0.1)]

    ; converts points in percentages
    let pointstotal points-buy + points-ope + points-saf + points-sec + points-com + points-tim + points-pol
    set w-buy points-buy / pointstotal
    set w-ope points-ope / pointstotal
    set w-saf points-saf / pointstotal
    set w-sec points-sec / pointstotal
    set w-com points-com / pointstotal
    set w-tim points-tim / pointstotal
    set w-pol points-pol / pointstotal

 end


to weights-socio-2
    ; assigns points with a normal distribution for each attribute
    let points-buy2 -1
    while [points-buy2 < 0 or points-buy2 > 100]
    [set points-buy2 random-normal p-buy2 (p-buy2 * 0.1)]

    let points-ope2 -1
    while [points-ope2 < 0 or points-ope2 > 100]
    [set points-ope2 random-normal p-ope2 (p-ope2 * 0.1)]

    let points-saf2 -1
    while [points-saf2 < 0 or points-saf2 > 100]
    [set points-saf2 random-normal p-saf2 (p-saf2 * 0.1)]

    let points-sec2 -1
    while [points-sec2 < 0 or points-sec2 > 100]
    [set points-sec2 random-normal p-sec2 (p-sec2 * 0.1)]

    let points-com2 -1
    while [points-com2 < 0 or points-com2 > 100]
    [set points-com2 random-normal p-com2 (p-com2 * 0.1)]

    let points-tim2 -1
    while [points-tim2 < 0 or points-tim2 > 100]
    [set points-tim2 random-normal p-tim2 (p-tim2 * 0.1)]

    let points-pol2 -1
    while [points-pol2 < 0 or points-pol2 > 100]
    [set points-pol2 random-normal p-pol2 (p-pol2 * 0.1)]

    ; converts points in percentages
    let pointstotal2 points-buy2 + points-ope2 + points-saf2 + points-sec2 + points-com2 + points-tim2 + points-pol2
    set w-buy points-buy2 / pointstotal2
    set w-ope points-ope2 / pointstotal2
    set w-saf points-saf2 / pointstotal2
    set w-sec points-sec2 / pointstotal2
    set w-com points-com2 / pointstotal2
    set w-tim points-tim2 / pointstotal2
    set w-pol points-pol2 / pointstotal2

 end



to weights-socio-3

    ; assigns points with a normal distribution for each attribute
    let points-buy3 -1
    while [points-buy3 < 0 or points-buy3 > 100]
    [set points-buy3 random-normal p-buy3 (p-buy3 * 0.1)]

    let points-ope3 -1
    while [points-ope3 < 0 or points-ope3 > 100]
    [set points-ope3 random-normal p-ope3 (p-ope3 * 0.1)]

    let points-saf3 -1
    while [points-saf3 < 0 or points-saf3 > 100]
    [set points-saf3 random-normal p-saf3 (p-saf3 * 0.1)]

    let points-sec3 -1
    while [points-sec3 < 0 or points-sec3 > 100]
    [set points-sec3 random-normal p-sec3 (p-sec3 * 0.1)]

    let points-com3 -1
    while [points-com3 < 0 or points-com3 > 100]
    [set points-com3 random-normal p-com3 (p-com3 * 0.1)]

    let points-tim3 -1
    while [points-tim3 < 0 or points-tim3 > 100]
    [set points-tim3 random-normal p-tim3 (p-tim3 * 0.1)]

    let points-pol3 -1
    while [points-pol3 < 0 or points-pol3 > 100]
    [set points-pol3 random-normal p-pol3 (p-pol3 * 0.1)]

    ; converts points in percentages
    let pointstotal3 points-buy3 + points-ope3 + points-saf3 + points-sec3 + points-com3 + points-tim3 + points-pol3
    set w-buy points-buy3 / pointstotal3
    set w-ope points-ope3 / pointstotal3
    set w-saf points-saf3 / pointstotal3
    set w-sec points-sec3 / pointstotal3
    set w-com points-com3 / pointstotal3
    set w-tim points-tim3 / pointstotal3
    set w-pol points-pol3 / pointstotal3

end

to set-speed

   set speed-m first (item 36 data)
   set speed-c first (item 37 data)
   set speed-p first (item 38 data)

  ask persons [
    if transport-mode = 1
      [set speed random-normal speed-m (speed-m * 0.1)]
    if transport-mode = 2
      [set speed random-normal speed-c (speed-c * 0.1)]
    if transport-mode = 3
      [set speed random-normal speed-p (speed-p * 0.1)]
     ]
end

to set-average-km

  ask persons [set average-km max list 5000 (random-normal 15000 5000)]

end



;PROCEDURES RELATED TO SETUP-TRANSPORTS


to set-moto-age ;moto-age (UNAL Antigüedad 2017 / update with data from the city)

  let r1-age-mot first (item 31 data)
  let r2-age-mot first (item 32 data)
  let r3-age-mot first (item 33 data)
  let r4-age-mot first (item 34 data)
  let r5-age-mot first (item 35 data)

  ask persons with [moto-owner = 0] [set moto-age 0] ; Update when people had moto in the previous period but changed mode
  ask persons with [moto-owner = 1][
    let num random 100
    ifelse num < r1-age-mot
     [set moto-age (10 + random 38)]
     [ifelse num < r2-age-mot
      [set moto-age (6 + random 3)]
      [ifelse num < r3-age-mot
       [set moto-age (4 + random 2)]
       [ifelse num < r4-age-mot
        [set moto-age 4]
        [ifelse num < r5-age-mot
         [set moto-age (1 + random 2)]
         [set moto-age 1]
        ]
       ]
      ]
    ]
  ]
end

to set-moto-tech ;tech (ANDEMOS jun2021 total motos eléctricas 0,13%) gasoline= 1 electric= 2
  ask persons with [moto-owner = 0] [set moto-tech 0] ; Update when people had moto in the previous period but changed mode
   ask persons with [moto-owner = 1 and moto-tech = 0]
    [set moto-tech 1]

  ; código en caso de que se introduzca una tecnología diferente

   ; [let num random-float 1
    ;ifelse (num <= 0.013) and (moto-age < 7) ;primera moto elect registrada en el país en 2011 (check first register in Cali).
  ;[set moto-tech 2]
     ;[set moto-tech 1]]

end

to set-transp-attributes


; Asignation of initial scores (0 - 1) to the acquisition cost for each transport mode
  set cost-buy-mot first (item 39 data)
  set cost-buy-car first (item 40 data)
  set cost-buy-pub first (item 41 data)


; Asignation of initial scores (0 - 1) to the operation fixed cost for each transport mode
  set costf-op-mot first (item 42 data)
  set costf-op-car first (item 43 data)
  set costf-op-pub first (item 44 data)

; Asignation of scores (0 - 1) to pollution for each transport mode
;  set pollution-mot m-pol
 ; set pollution-car c-pol
 ; set pollution-pub b-pol

 ; Gasoline price USD
  set gas-price first (item 5 data);

; Efficiency of transport modes
  set eff-mot first (item 0 data)
  set eff-car first (item 1 data)

; Accident rate
 set acc-rate-mot first (item 6 data)
 set acc-rate-car first (item 7 data)
 set acc-rate-pub first (item 8 data)

; Emissions
 set emi-mot first (item 2 data)
 set emi-car first (item 3 data)
 set emi-pub first (item 4 data)


; Insecurity rates of transport modes
  set insecur-m first (item 28 data)
  set insecur-c first (item 29 data)
  set insecur-p first (item 30 data)


end



; PROCEDURES RELATED TO GO


to commute
ask persons
  [
   let percentage-mot (count persons with [transport-mode = 1]) / population
   let percentage-car (count persons with [transport-mode = 2]) / population
   let percentage-pub (count persons with [transport-mode = 3]) / population

   set speed-mot (speed-m * (1 - (percentage-mot / 4)))
   set speed-car (speed-c * (1 - (percentage-mot / 4) - percentage-car / 2)) ;CHEQUEAR CUANDO SE ESTABLEZCA CAPACIDAD DE LAS VÍAS REDUCIR SOLO SI SE EXCEDE ESA CAPACIDAD
   set speed-pub (speed-p * (1 - (percentage-mot / 4) - percentage-car / 2))
  if transport-mode = 1
   [set speed speed-mot]
  if transport-mode = 2
   [set speed speed-car]
  if transport-mode = 3
   [set speed speed-pub]
  ifelse distance workplace > (1 * speed)
   [fd 1 * speed]
   [move-to household]

  ]

   ;set path []
     ;set path nw:turtles-on-path-to destination
;  let R distance one-of offices
 ;   if R > 0
  ;  [face office
  ;    fd 1 * speed]
  ; ask persons
   ; [ifelse distance office > (1 * speed)
    ;[fd 1 *speed]
    ;[move-to household]

end

to update-safety

  ask persons [set safety 0]

  ask persons with [transport-mode = 1]
  [ifelse ((random-float 1 <= (acc-rate-mot * 1.8)) and gender = 1  and  age < 35 and age > 20 ) [set safety 1 ] ; young males are more prone to have accidents
    [if  random-float 1 <= acc-rate-mot [set safety 1]]]

  ask persons with [transport-mode = 2]
  [ifelse ((random-float 1 <= (acc-rate-car * 1.5)) and gender = 1  and  age < 35 and age > 20 ) [set safety 1 ] ; young males are more prone to have accidents
    [if  random-float 1 <= acc-rate-car [set safety 1]]]

  ask persons with [transport-mode = 3]
     [if random-float 1 <= acc-rate-pub
        [set safety 1 ]]

end

to update-security ; Caluclates scores for security, based on people that have experienced insecuirity incidents. Security = 0 means no incidents.
  ask persons [set security 0]

  ask persons with [transport-mode = 1]
    [if random-float 1 <= insecur-m [set security 1]]

  ask persons with [transport-mode = 2]
    [if random-float 1 <= insecur-c [set security 1]]

  ask persons with [transport-mode = 3]
    [if random-float 1 <= insecur-p [set security 1]]

  ask persons [ ; checks if people in the network have experienced insecurity incidents
   let incident-m count link-neighbors with [transport-mode = 1 and security = 1]
   let incident-c count link-neighbors with [transport-mode = 2 and security = 1]
   let incident-p count link-neighbors with [transport-mode = 3 and security = 1]

   let sum-incident (incident-m + incident-c + incident-p)
  ifelse sum-incident > 0
   [set security-mot (1 - (incident-m / sum-incident))
    set security-car (1 - (incident-c / sum-incident))
    set security-pub (1 - (incident-p / sum-incident))]
   [set security-mot 1 set security-car 1 set security-pub 1 ]
  ]
end

to update-security2 ; increases percepcion of insecurity for female
  ask persons [set security 0]

  ask persons with [transport-mode = 1]
    [if random-float 1 <= insecur-m [set security 1]]

  ask persons with [transport-mode = 2]
    [if random-float 1 <= insecur-c [set security 1]]

  ask persons with [transport-mode = 3]
    [if random-float 1 <= insecur-p [set security 1]]

  ask persons [
   let incident-m count link-neighbors with [transport-mode = 1 and security = 1]
   let incident-c count link-neighbors with [transport-mode = 2 and security = 1]
   let incident-p count link-neighbors with [transport-mode = 3 and security = 1]

   let sum-incident (incident-m + incident-c + incident-p)
  ifelse sum-incident > 0
    [ask persons with [gender = 1] [set security-mot (1 - (incident-m / sum-incident))]
     ask persons with [gender = 2] [set security-mot ((1 - (incident-m / sum-incident)) * sec-percep-fem)]
     ask persons with [gender = 1] [set security-car (1 - (incident-c / sum-incident))]
     ask persons with [gender = 2] [set security-car ((1 - (incident-c / sum-incident)) * sec-percep-fem)]
     ask persons with [gender = 1] [set security-pub (1 - (incident-p / sum-incident))]
     ask persons with [gender = 2] [set security-pub ((1 - (incident-p / sum-incident)) * sec-percep-fem)]]

   [set security-mot 1 set security-car 1 set security-pub 1 ]
  ]
end

to update-scores-tech-attributes; This values are used to calculate the satisfaction function for every decision period

;update purchase cost
ask persons [
 set cost-buy-mot (cost-buy-mot * (1 - buy-increase-m) )
 set cost-buy-car (cost-buy-car * (1 - buy-increase-c) )
]

 ; update operational costs
  ask persons [
   set costv-mot (average-km / eff-mot * gas-price)
   set costv-car (average-km / eff-car * gas-price)

   let sumcostv (costv-mot + costv-car)

   set costv-op-mot (1 - (costv-mot / sumcostv))
   set costv-op-car (1 - (costv-car / sumcostv))

   let sumcostop (costv-op-mot + costf-op-mot + costv-op-car + costf-op-car + costf-op-pub)

   set cost-op-mot ((costv-op-mot + costf-op-mot) / sumcostop)
   set cost-op-car ((costv-op-car + costf-op-car) / sumcostop)
   set cost-op-pub  costf-op-pub
  ]

 ; update safety according to number of accidents by mode
  ask persons[
  let acc-mot count persons with [transport-mode = 1 and safety = 1]
  let acc-car count persons with [transport-mode = 2 and safety = 1]
  let acc-pub count persons with [transport-mode = 3 and safety = 1]
  let sumacc (acc-mot + acc-car + acc-pub)
  if sumacc > 0
  [set safety-mot (1 - (acc-mot / sumacc))
   set safety-car (1 - (acc-car / sumacc))
   set safety-pub (1 - (acc-pub / sumacc))
  ]
  ]

  ; update safety according to number of accidents by mode in the network
 ; ask persons [
 ;  let acc-mot count link-neighbors with [transport-mode = 1 and safety = 1]
 ;  let acc-car count link-neighbors with [transport-mode = 2 and safety = 1]
  ; let acc-pub count link-neighbors with [transport-mode = 3 and safety = 1]
  ;  let sumacc (acc-mot + acc-car + acc-pub)
 ;    ifelse sumacc > 0
 ;     [set safety-mot (1 - (acc-mot / sumacc))
 ;      set safety-car (1 - (acc-car / sumacc))
 ;      set safety-pub (1 - (acc-pub / sumacc))]
 ;     [set safety-mot 1 set safety-car 1 set safety-pub 1 ]
 ; ]

  ; update security



  ; update CO2 emissions (pollution)
    ask persons [
    if transport-mode = 1
      [set pollution (average-km * emi-mot)]
    if transport-mode = 2
      [set pollution (average-km * emi-car)]
    if transport-mode = 3
      [set pollution (average-km * emi-pub)]
    let emissions-mot sum [pollution] of persons with [transport-mode = 1]
    let emissions-car sum [pollution] of persons with [transport-mode = 2]
    let emissions-pub sum [pollution] of persons with [transport-mode = 3]
    let sum-emissions (emissions-mot + emissions-car + emissions-pub)
    let max-emi max (list emi-mot emi-car emi-pub)
    let tot-km sum [average-km] of persons
    let max-emissions (max-emi * tot-km)
    set pollution-tot (1 - (sum-emissions / max-emissions)) ; score of pollution
    ;ask persons with [transport-mode = 2] [show pollution]
    ;ask persons with [transport-mode = 2] [show safety]
  ]

 ; show [pollution] of persons

  ; update comfort
  ask persons [
   let prob-incident     random-float 1      ; has impact on public transport comfort
   let prob-mech-failure random-float 1      ; has impact on public transport comfort
   let prob-congestion   random-float 1      ; has impact on car comfort (UPDATE WITH CONGESTION WHEN COMMUNTING)
   let prob-bad-weather  random-float 1      ; has impact on moto comfort
    set comfort-mot (0.4 * (1 - prob-bad-weather)) ; probability of having bad weather
    set comfort-car (0.7 * (1 - prob-congestion))  ; probability of having
    set comfort-pub (0.6 * (1 - prob-incident) * (1 - prob-mech-failure) * (1 - prob-bad-weather)) ; probability of being stolen - probability of mechanic-failure - probability of having bad weather

    if transport-mode = 1
    [set comfort comfort-mot]
    if transport-mode = 2
    [set comfort comfort-car]
    if transport-mode = 3
    [set comfort comfort-pub]

  ; show [comfort] of persons
  ]

  ; update time
  ask persons [
     ; calculation of average time of travel for each transport mode depending on proportion of vehicules circulating
    set time-m (average-km / speed-mot)
    set time-c (average-km / speed-car)
    set time-p (average-km / speed-pub)
     ; update travel time for persosn according to the transport mode
    if transport-mode = 1
    [set time time-m]
    if transport-mode = 2
    [set time time-c]
    if transport-mode = 3
    [set time time-p]
     ;calaculation of time score for satisfaction function
    let min-time min (list time-m time-c time-p)
    let max-time max (list time-m time-c time-p)
    set time-mot (1 - (time-m - min-time) / (max-time - min-time))
    set time-car (1 - (time-c - min-time) / (max-time - min-time))
    set time-pub (1 - (time-p - min-time) / (max-time - min-time))
  ]

  ;show [time] of persons

end

to update-satisfaction
  ask persons [


   set satisfaction-mot (w-buy * cost-buy-mot + w-ope * cost-op-mot + w-saf * safety-mot + w-sec * security-mot + w-com * comfort-mot + w-tim * time-mot + w-pol * pollution-tot)
   set satisfaction-car (w-buy * cost-buy-car + w-ope * cost-op-car + w-saf * safety-car + w-sec * security-car + w-com * comfort-car + w-tim * time-car + w-pol * pollution-tot)
   set satisfaction-pub (w-buy * cost-buy-pub + w-ope * cost-op-pub + w-saf * safety-pub + w-sec * security-pub + w-com * comfort-pub + w-tim * time-pub + w-pol * pollution-tot)
   ]
  ask persons with [transport-mode = 1]
   [set satisfaction satisfaction-mot]
  ask persons with [transport-mode = 2]
   [set satisfaction satisfaction-car]
  ask persons with [transport-mode = 3]
   [set satisfaction satisfaction-pub]

end

to update-experience
 ask persons [
  if transport-mode = 1 [set experience-mot experience-mot + 1]
  if transport-mode = 2 [set experience-car experience-car + 1]
  if transport-mode = 3 [set experience-pub experience-pub + 1]
  ]
end

to update-uncertainty
 ask persons [
    ; calculates how many neihgbors have the same transport mode
    let mimodo transport-mode
    let vecinosmimodo count link-neighbors with [transport-mode = mimodo]

    ; calculates the proportion of times that the selected mode has choosen during the simulation time
 ifelse transport-mode = 1
      [let experience experience-mot]
      [ifelse transport-mode = 2
       [let experience experience-car]
       [let experience experience-pub
    let miexperiencia (experience / (experience-mot + experience-car + experience-pub))

    ; calculates uncertainty as the weighted average of the deviation of own experience and neighbors' experience. Alpha and Beta correspond to Hosftede variables.
    set uncertainty  (alpha-uncertainty * (1 - miexperiencia) + beta-colectiveness * (1 - vecinosmimodo / count link-neighbors))
  ]]]
end

to update-type-choice
  ask persons with [satisfaction > satisfaction-threshold and uncertainty <= uncertainty-threshold] ; Hof 1 y sat thr 0
  [set type-choice "repetition" ]; repetition keeps the same transport-mode of the previous period


  ask persons with [satisfaction >= satisfaction-threshold and uncertainty > uncertainty-threshold] ; AGREGAR EL IGUAL EN SATISFACTION y quitar de uncertainty Hof 0 y Sat thr 0
  [imitation set type-choice "imitation" ]
    ;set color white]

  ask persons with [satisfaction <= satisfaction-threshold and uncertainty < uncertainty-threshold]  ; Hof 1 y Sat thr 1
  [deliberation set type-choice "deliberation"]
    ;set color white]

  ask persons with [satisfaction < satisfaction-threshold and uncertainty >= uncertainty-threshold] ;  Hof 0 y Sat thr 1
  [inquiry set type-choice "inquiry"]
    ;set color white]
end

to choice
  ask persons with [type-choice = "imitation"][imitation]
  ask persons with [type-choice = "inquiry"][inquiry]
  ask persons with [type-choice = "deliberation"][deliberation]
end

to imitation ; transpot-mode chosen according to the most used among links in their net
  let moto count link-neighbors with [transport-mode = 1] / count link-neighbors
  let car  count link-neighbors with [transport-mode = 2] / count link-neighbors
  let pub  count link-neighbors with [transport-mode = 3] / count link-neighbors

  if moto = max (list moto car pub) [set transport-mode 1 ]
  if car  = max (list moto car pub) [set transport-mode 2 ]
  if pub  = max (list moto car pub) [set transport-mode 3 ]
  if moto = car  and moto = pub  [set transport-mode (1 + random 3)]
  if moto = car  and moto > pub  [ifelse random-float 1 < 0.5 [set transport-mode 1] [set transport-mode 2]]
  if moto = pub  and moto > car  [ifelse random-float 1 < 0.5 [set transport-mode 1] [set transport-mode 3]]
  if car  = pub  and car  > moto [ifelse random-float 1 < 0.5 [set transport-mode 2] [set transport-mode 3]]
end

to inquiry ; Rational process that involves social environment. Only evaluates transport modes used by contacts in the own network.

  let mot count link-neighbors with [transport-mode = 1]
  let car count link-neighbors with [transport-mode = 2]
  let pub count link-neighbors with [transport-mode = 3]
  set utility -1

  ; cálculo de la utilidad evaluando todos los medios de transporte usados en su red
  if inquiry-process = "everybody" [; en el seleccionador se escogió la alternativa de evaluar todas las alternativas de la red
    if mot > 0 and car = 0 and pub = 0 [set utility satisfaction-mot]
    if mot = 0 and car > 0 and pub = 0 [set utility satisfaction-car]
    if mot = 0 and car = 0 and pub > 0 [set utility satisfaction-pub]
    if mot > 0 and car > 0 and pub = 0 [set utility max (list satisfaction-mot satisfaction-car)]
    if mot > 0 and car = 0 and pub > 0 [set utility max (list satisfaction-mot satisfaction-pub)]
    if mot = 0 and car > 0 and pub > 0 [set utility max (list satisfaction-car satisfaction-pub)]
    if mot > 0 and car > 0 and pub > 0 [set utility max (list satisfaction-mot satisfaction-car satisfaction-pub)]
  ]

  ; cálculo de la utilidad evaluando el medio más usado en su red (CREO QUE ESTE CÓDIGO FUNCIONA TAMBIÉN PARA EVALUAR "EVERYBODY")
  if inquiry-process = "most-used" [; en el seleccionador se escogió la alternativa de evaluar todas las alternativas de la red
    if mot = car and mot = pub [set utility one-of (list satisfaction-mot satisfaction-car satisfaction-pub) ]
    if mot = car and mot > pub [set utility one-of (list satisfaction-mot satisfaction-car)]
    if mot = pub and mot > car [set utility one-of (list satisfaction-mot satisfaction-pub)]
    if car = pub and car > mot [set utility one-of (list satisfaction-car satisfaction-pub)]
    if mot = max (list mot car pub) [set utility satisfaction-mot]
    if car = max (list mot car pub) [set utility satisfaction-car]
    if pub = max (list mot car pub) [set utility satisfaction-pub]
  ]

  ; decisión: if satisfaction with the transport mode compared is higher, then adopts that mode.   adopta sólo si halla una satisfacción mayor que la actual
  if utility > satisfaction  [ ; compares the own utility with the highest utility among the transport modes analized)
   if utility = satisfaction-mot [set transport-mode 1 ]
   if utility = satisfaction-car [set transport-mode 2 ]
   if utility = satisfaction-pub [set transport-mode 3 ]
  ]

end

to deliberation ;  this is a rational and individual process of selection. The network doesn't intervene. The final selection occurs trhough a logit function.

let beta1 w-buy
let beta2 w-ope
let beta3 w-saf
let beta4 w-sec
let beta5 w-com
let beta6 w-tim
let beta7 w-pol

let utility-mot (beta1 * cost-buy-mot + beta2 * cost-op-mot + beta3 * safety-mot + beta4 * security-mot + beta5 * comfort-mot + beta6 * time-mot + beta7 * pollution-tot)

let utility-car (beta1 * cost-buy-car + beta2 * cost-op-car + beta3 * safety-car + beta4 * security-car + beta5 * comfort-car + beta6 * time-car + beta7 * pollution-tot)

let utility-pub (beta1 * cost-buy-pub + beta2 * cost-op-pub + beta3 * safety-pub + beta4 * security-pub + beta5 * comfort-pub + beta6 * time-pub + beta7 * pollution-tot)

let cumulsum exp(utility-mot) + exp(utility-car) + exp(utility-pub)

let P1 exp(utility-mot) / cumulsum

let P2 exp(utility-car) / cumulsum

let P3 exp(utility-pub) / cumulsum

let choose  random-float (P1 + P2 + P3)
;let choose 1000
  ifelse choose < P1
 [set transport-mode 1 ]
 [ifelse choose < P1 + P2
  [set transport-mode 2 ]
  [set transport-mode 3 ]]

end

to update-ownership

    ask persons [
    if transport-mode = 1 [set moto-owner 1 set car-owner  0 set color black]
    if transport-mode = 2 [set car-owner  1 set moto-owner 0 set color red]
    if transport-mode = 3 [set car-owner  0 set moto-owner 0 set color blue]
  ]
end

to update-age-moto
 ask persons with [moto-owner = 1]
  [set moto-age moto-age + 1]
end

to update-age-people
 ask persons [set age age + 1]
end



to population-growth ; new people born 15 years old

  set population-rate -1
  while [population-rate < 0 or population-rate > 1]
  [set population-rate random-normal (first (item 56  data)) (first (item 56  data) * 0.1) ]

 ;set population-rate (first (item 56  data))

  create-persons (population-rate * count persons) [
; age
  set age 15
  ;set shape one-of shapes
  ifelse random-float 1 < female-percentage [set gender 2] [set gender 1]
; socioeconomic level
  let num random-float 1
    ifelse num <= est-1 [set socioeconomic-sit 1 ]
      [ifelse (num > est-1 and num < (est-1 + est-2)) [set socioeconomic-sit 2 ] [set socioeconomic-sit 3]]
; connect to network
   let my-soc socioeconomic-sit
   ; create-links-with n-of (0.05  * count (persons with [socioeconomic-sit  =  my-soc ])) other (persons with [socioeconomic-sit  =  my-soc ]) [set color red  set hidden? false]
   ; create-links-with n-of (0.01  * count (persons with [socioeconomic-sit !=  my-soc ])) other (persons with [socioeconomic-sit !=  my-soc ]) [set color blue set hidden? false]


     create-links-with n-of 2 other persons with [socioeconomic-sit  =  my-soc] [set color green  set hidden? false]
  let new-node one-of [ both-ends ] of one-of links
    let new-link-neighbors n-of (3 / count persons with [socioeconomic-sit = my-soc])  other (persons with [socioeconomic-sit = my-soc])
    ask new-link-neighbors [
      create-link-with new-node
      [set color blue  set hidden? false]
    ]

   let new-node-all one-of [ both-ends ] of one-of links
    let new-link-neighbors-all n-of (2 / count persons with [socioeconomic-sit != my-soc]) other (persons with [socioeconomic-sit != my-soc])
    ask new-link-neighbors-all [
      create-link-with new-node-all
       [set color red  set hidden? false]
  ]



; workplace
   set workplace one-of patches with [pcolor = black]
   face workplace
; neighborhood
   if socioeconomic-sit = 1  [move-to one-of patches with [socioec-level = 1]]
   if socioeconomic-sit = 2  [move-to one-of patches with [socioec-level = 2]]
   if socioeconomic-sit = 3  [move-to one-of patches with [socioec-level = 3]]
  set household patch-here
; assignation moto
   let m-est1 ((count persons with [moto-owner = 1 and socioeconomic-sit  =  1 and gender = 1]) / (count persons with [socioeconomic-sit  =  1 and gender = 1])) ; new proportion of male motorcyclists in socioec level 1
   let f-est1 ((count persons with [moto-owner = 1 and socioeconomic-sit  =  1 and gender = 2]) / (count persons with [socioeconomic-sit  =  1 and gender = 2]))
    if socioeconomic-sit  =  1 and gender = 1 and random-float 1 < m-est1 [set moto-owner 1]
    if socioeconomic-sit  =  1 and gender = 2 and random-float 1 < f-est1 [set moto-owner 1]
   let m-est2 ((count persons with [moto-owner = 1 and socioeconomic-sit  =  2 and gender = 1]) / (count persons with [socioeconomic-sit  =  2 and gender = 1]))
   let f-est2 ((count persons with [moto-owner = 1 and socioeconomic-sit  =  2 and gender = 2]) / (count persons with [socioeconomic-sit  =  2 and gender = 2]))
    if socioeconomic-sit  =  2 and gender = 1 and random-float 1 < m-est2 [set moto-owner 1]
    if socioeconomic-sit  =  2 and gender = 2 and random-float 1 < f-est2 [set moto-owner 1]
   let m-est3 ((count persons with [moto-owner = 1 and socioeconomic-sit  =  3 and gender = 1]) / (count persons with [socioeconomic-sit  =  3 and gender = 1]))
   let f-est3 ((count persons with [moto-owner = 1 and socioeconomic-sit  =  3 and gender = 2]) / (count persons with [socioeconomic-sit  =  3 and gender = 2]))
    if socioeconomic-sit  =  3 and gender = 1 and random-float 1 < m-est2 [set moto-owner 1]
    if socioeconomic-sit  =  3 and gender = 2 and random-float 1 < f-est2 [set moto-owner 1]
;  transport-mode
    if moto-owner = 1 [set transport-mode 1 set color black]
    let percent-cars ((count persons with [car-owner = 1]) / (count persons with [age > 15])) ; proportion of cars before adding new people
      if transport-mode = 0 and random-float 1 < percent-cars [set car-owner 1 set transport-mode 2 set color red ]
    if transport-mode = 0 [set transport-mode 3 set color blue]
;  uncertainty threshold
    let uncertain -1
     while [uncertain < 0 or uncertain > 1] [set uncertain random-normal Hofstede-uncertainty (Hofstede-uncertainty * deviation)]
    set uncertainty-threshold uncertain
;  satisfaction threshold
    let satisfact -1
     while [satisfact < 0 or satisfact > 1] [set satisfact random-normal satisfaction-mean deviation]
    set satisfaction-threshold satisfact
;  weights
    if socioeconomic-sit = 1 [weights-socio-1]
    if socioeconomic-sit = 2 [weights-socio-2]
    if socioeconomic-sit = 3 [weights-socio-3]
;  average speed
    if transport-mode = 1
      [set speed random-normal speed-m (speed-m * 0.1)]
     if transport-mode = 2
      [set speed random-normal speed-c (speed-c * 0.1)]
     if transport-mode = 3
      [set speed random-normal speed-p (speed-p * 0.1)]
;  average distance
    set average-km max list 5000 (random-normal 15000 5000)

  ]
end


;to people-die  ; people > 80 years old are no longer considered in the system
;  ask persons with [age >= 75] [die]

;end



to indicators
  set total-repeat  total-repeat  + count persons with [type-choice = "repetition"  ]
  set total-imita   total-imita   + count persons with [type-choice = "imitation"   ]
  set total-delib   total-delib   + count persons with [type-choice = "deliberation"]
  set total-inquiry total-inquiry + count persons with [type-choice = "inquiry"     ]
end



to create-csv2
  if ticks = 60
    [nw:save-matrix "matrix.csv"
    csv:to-file "results-1.csv" [ (list who transport-mode age gender socioeconomic-sit household workplace link-neighbors) ] of persons]

  if ticks = 120
    [nw:save-matrix "matrix.csv"
    csv:to-file "results-2.csv" [ (list who transport-mode age gender socioeconomic-sit household workplace link-neighbors) ] of persons]

  if ticks = 180
    [nw:save-matrix "matrix.csv"
    csv:to-file "results-3.csv" [ (list who transport-mode age gender socioeconomic-sit household workplace link-neighbors) ] of persons]

  if ticks = 240
    [nw:save-matrix "matrix.csv"
    csv:to-file "results-4.csv" [ (list who transport-mode age gender socioeconomic-sit household workplace link-neighbors) ] of persons]

  if ticks = 300
    [nw:save-matrix "matrix.csv"
    csv:to-file "results-5.csv" [ (list who transport-mode age gender socioeconomic-sit household workplace link-neighbors) ] of persons]

  if ticks = 360
    [nw:save-matrix "matrix.csv"
    csv:to-file "results-6.csv" [ (list who transport-mode age gender socioeconomic-sit household workplace link-neighbors) ] of persons]

  if ticks = 420
    [nw:save-matrix "matrix.csv"
    csv:to-file "results-7.csv" [ (list who transport-mode age gender socioeconomic-sit household workplace link-neighbors) ] of persons]

  if ticks = 480
    [nw:save-matrix "matrix.csv"
    csv:to-file "results-8.csv" [ (list who transport-mode age gender socioeconomic-sit household workplace link-neighbors) ] of persons]

  if ticks = 540
    [nw:save-matrix "matrix.csv"
    csv:to-file "results-9.csv" [ (list who transport-mode age gender socioeconomic-sit household workplace link-neighbors) ] of persons]

  if ticks = 600
    [nw:save-matrix "matrix.csv"
    csv:to-file "results-10.csv" [ (list who transport-mode age gender socioeconomic-sit household workplace link-neighbors) ] of persons]

end



to create-csv

;  nw:save-matrix "matrix.csv"
 ; csv:to-file "results.csv" [ (list who transport-mode age gender socioeconomic-sit household workplace link-neighbors satisfaction satisfaction-mot satisfaction-car satisfaction-pub) ] of persons

 ; if ticks = 1
  ;  [nw:save-matrix "matrix-0.csv"
  ;  csv:to-file "results-0.csv" [ (list who transport-mode age gender socioeconomic-sit household workplace link-neighbors satisfaction satisfaction-mot satisfaction-car satisfaction-pub cost-buy-car cost-op-car safety-car security-car comfort-car time-car pollution-tot nw:betweenness-centrality) ] of persons]

  if ticks = 30
    [nw:save-matrix "matrix-1.csv"
    csv:to-file "results-1.csv" [ (list who transport-mode age gender socioeconomic-sit household workplace link-neighbors satisfaction satisfaction-mot satisfaction-car satisfaction-pub cost-buy-car cost-op-car safety-car security-car comfort-car time-car pollution-tot nw:betweenness-centrality) ] of persons]

  if ticks = 60
    [nw:save-matrix "matrix-2.csv"
    csv:to-file "results-2.csv" [ (list who transport-mode age gender socioeconomic-sit household workplace link-neighbors satisfaction satisfaction-mot satisfaction-car satisfaction-pub cost-buy-car cost-op-car safety-car security-car comfort-car time-car pollution-tot nw:betweenness-centrality) ] of persons]

  if ticks = 90
    [nw:save-matrix "matrix-3.csv"
    csv:to-file "results-3.csv" [ (list who transport-mode age gender socioeconomic-sit household workplace link-neighbors satisfaction satisfaction-mot satisfaction-car satisfaction-pub cost-buy-car cost-op-car safety-car security-car comfort-car time-car pollution-tot nw:betweenness-centrality) ] of persons]

  if ticks = 120
    [nw:save-matrix "matrix-4.csv"
    csv:to-file "results-4.csv" [ (list who transport-mode age gender socioeconomic-sit household workplace link-neighbors satisfaction satisfaction-mot satisfaction-car satisfaction-pub cost-buy-car cost-op-car safety-car security-car comfort-car time-car pollution-tot nw:betweenness-centrality) ] of persons]

  if ticks = 150
    [nw:save-matrix "matrix-5.csv"
    csv:to-file "results-5.csv" [ (list who transport-mode age gender socioeconomic-sit household workplace link-neighbors satisfaction satisfaction-mot satisfaction-car satisfaction-pub cost-buy-car cost-op-car safety-car security-car comfort-car time-car pollution-tot nw:betweenness-centrality) ] of persons]

  if ticks = 180
    [nw:save-matrix "matrix-6.csv"
    csv:to-file "results-6.csv" [ (list who transport-mode age gender socioeconomic-sit household workplace link-neighbors satisfaction satisfaction-mot satisfaction-car satisfaction-pub cost-buy-car cost-op-car safety-car security-car comfort-car time-car pollution-tot nw:betweenness-centrality) ] of persons]

  if ticks = 210
    [nw:save-matrix "matrix-7.csv"
    csv:to-file "results-7.csv" [ (list who transport-mode age gender socioeconomic-sit household workplace link-neighbors satisfaction satisfaction-mot satisfaction-car satisfaction-pub cost-buy-car cost-op-car safety-car security-car comfort-car time-car pollution-tot nw:betweenness-centrality) ] of persons]

  if ticks = 240
    [nw:save-matrix "matrix-8.csv"
    csv:to-file "results-8.csv" [ (list who transport-mode age gender socioeconomic-sit household workplace link-neighbors satisfaction satisfaction-mot satisfaction-car satisfaction-pub cost-buy-car cost-op-car safety-car security-car comfort-car time-car pollution-tot nw:betweenness-centrality) ] of persons]

  if ticks = 270
    [nw:save-matrix "matrix-9.csv"
    csv:to-file "results-9.csv" [ (list who transport-mode age gender socioeconomic-sit household workplace link-neighbors satisfaction satisfaction-mot satisfaction-car satisfaction-pub cost-buy-car cost-op-car safety-car security-car comfort-car time-car pollution-tot nw:betweenness-centrality) ] of persons]

  if ticks = 300
    [nw:save-matrix "matrix-10.csv"
    csv:to-file "results-10.csv" [ (list who transport-mode age gender socioeconomic-sit household workplace link-neighbors satisfaction satisfaction-mot satisfaction-car satisfaction-pub cost-buy-car cost-op-car safety-car security-car comfort-car time-car pollution-tot nw:betweenness-centrality) ] of persons]

end


to Excel-export ; Generates a file with results in a CVS list. Overwrite data every run.
  nw:save-matrix "matrix.csv"
  csv:to-file "results.csv" [ (list who transport-mode age gender socioeconomic-sit household workplace link-neighbors satisfaction satisfaction-mot satisfaction-car satisfaction-pub) ] of persons
  ;ask persons [show [who] of link-neighbors]
end

;to setup-percent-age ; imports data from an Excel file
 ;set percent-age csv:from-file "example_data.csv"
 ;print percent-age
;end
@#$#@#$#@
GRAPHICS-WINDOW
252
18
820
587
-1
-1
29.5
1
10
1
1
1
0
0
0
1
-9
9
-9
9
0
0
1
ticks
30.0

BUTTON
22
35
86
68
Setup
Setup
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
103
36
166
69
Go
go
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
24
84
87
117
NIL
Go
T
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

INPUTBOX
10
137
101
197
Population
500.0
1
0
Number

PLOT
888
24
1215
227
Decision type
Time step
People
0.0
10.0
0.0
10.0
true
true
"" ""
PENS
"repet" 1.0 0 -16777216 true "" "if (ticks mod (31) = 0.000) [plot count persons with [type-choice = \"repetition\"]]"
"imit" 1.0 0 -13791810 true "" "if (ticks mod (31) = 0.000) [plot count persons with [type-choice = \"imitation\"]]"
"delib" 1.0 0 -8630108 true "" "if (ticks mod (31) = 0.000) [plot count persons with [type-choice = \"deliberation\"]]"
"inquiry" 1.0 0 -13840069 true "" "if (ticks mod (31) = 0.000) [plot count persons with [type-choice = \"inquiry\"]]"

MONITOR
1575
38
1645
83
Motorcycles
count persons with [transport-mode = 1]
2
1
11

MONITOR
1583
89
1642
134
Cars
count persons with [transport-mode = 2]
2
1
11

MONITOR
1583
138
1645
183
Public
count persons with [transport-mode = 3]
2
1
11

PLOT
894
263
1171
448
Satisfaction and uncertainty
Time step
%
0.0
10.0
0.0
1.0
true
true
"" ""
PENS
"Satis" 1.0 0 -16777216 true "" "if (ticks mod (31)) = 0.000 [plot mean [ satisfaction ] of persons]"
"Uncert" 1.0 0 -5298144 true "" "if (ticks mod (31)) = 0.000 [plot mean [ uncertainty ] of persons]"
"Sat-Thr" 1.0 0 -7500403 true "" "if (ticks mod (31)) = 0.000 [plot mean [ satisfaction-threshold ] of persons]"
"Unc-Thr" 1.0 0 -817084 true "" "if (ticks mod (31)) = 0.000 [plot mean [ uncertainty-threshold ] of persons]"

CHOOSER
10
437
148
482
Inquiry-process
Inquiry-process
"most-used" "everybody"
1

BUTTON
30
1015
143
1048
Excel-export
Excel-export
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

PLOT
1285
235
1571
401
Cars use by socioeconomic groups
Time step
Vehicles
0.0
10.0
0.0
10.0
true
true
"" ""
PENS
"1" 1.0 0 -16777216 true "" "if (ticks mod (31)) = 0.000 [plot count persons with [socioeconomic-sit = 1 AND transport-mode = 2]]"
"2" 1.0 0 -5298144 true "" "if (ticks mod (31)) = 0.000 [plot count persons with [socioeconomic-sit = 2 AND transport-mode = 2]]"
"3" 1.0 0 -13210332 true "" "if (ticks mod (31)) = 0.000 [plot count persons with [socioeconomic-sit = 3 AND transport-mode = 2]]"

PLOT
1284
34
1564
219
Moto use by socioeconomic groups
Time step
Vehicles
0.0
10.0
0.0
10.0
true
true
"" ""
PENS
"1" 1.0 0 -16777216 true "" "if (ticks mod (31)) = 0 [plot count persons with [socioeconomic-sit = 1 AND transport-mode = 1]]"
"2" 1.0 0 -5298144 true "" "if (ticks mod (31)) = 0 [plot count persons with [socioeconomic-sit = 2 AND transport-mode = 1]]"
"3" 1.0 0 -15575016 true "" "if (ticks mod (31)) = 0 [plot count persons with [socioeconomic-sit = 3 AND transport-mode = 1]]"

PLOT
1286
414
1572
581
Public use by socioeconomic groups
Time step
Passengers
0.0
10.0
0.0
10.0
true
true
"" ""
PENS
"1" 1.0 0 -16777216 true "" "if (ticks mod (31)) = 0.000 [plot count persons with [socioeconomic-sit = 1 AND transport-mode = 3]]"
"2" 1.0 0 -5298144 true "" "if (ticks mod (31)) = 0.000 [plot count persons with [socioeconomic-sit = 2 AND transport-mode = 3]]"
"3" 1.0 0 -15575016 true "" "if (ticks mod (31)) = 0.000 [plot count persons with [socioeconomic-sit = 3 AND transport-mode = 3]]"

PLOT
897
459
1171
647
Transport modes 
Time step
% of use
0.0
10.0
0.0
1.0
true
true
"" ""
PENS
"Moto" 1.0 0 -16777216 true "" "if (ticks mod (31)) = 0 [plot (count persons with [transport-mode = 1 ]) / population]"
"Car" 1.0 0 -5298144 true "" "if (ticks mod (31)) = 0 [plot (count persons with [transport-mode = 2]) / population]"
"Pub" 1.0 0 -14070903 true "" "if (ticks mod (31)) = 0 [plot (count persons with [transport-mode = 3]) / population]"

PLOT
883
659
1135
798
% population with moto
Time step
% of use
0.0
1.0
0.0
1.0
true
false
"" ""
PENS
"motos" 1.0 0 -16777216 true "" "if (ticks mod (31)) = 0.000 [plot count persons with [transport-mode = 1] / population]"

SLIDER
8
242
180
275
Hofstede-uncertainty
Hofstede-uncertainty
0
1
0.2
0.01
1
NIL
HORIZONTAL

PLOT
1651
160
1818
280
Satisfaction car
NIL
NIL
0.0
10.0
0.0
1.0
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "if (ticks mod (31)) = 0.000 [plot mean [ satisfaction ] of persons with [transport-mode = 2]]"

PLOT
1651
34
1819
154
Satisfaction moto
NIL
NIL
0.0
10.0
0.0
1.0
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "if (ticks mod (31) = 0.000) [plot mean [satisfaction] of persons with [transport-mode = 1]]"

PLOT
1651
289
1817
423
Satisfaction public
NIL
NIL
0.0
10.0
0.0
1.0
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "if (ticks mod (31)) = 0.000 [plot mean [satisfaction] of persons with [transport-mode = 3]]"

SLIDER
20
610
131
643
p-buy
p-buy
0
100
72.0
1
1
NIL
HORIZONTAL

TEXTBOX
20
593
286
621
Weights for low-income people
12
0.0
1

SLIDER
136
611
239
644
p-ope
p-ope
0
100
70.0
1
1
NIL
HORIZONTAL

SLIDER
452
612
553
645
p-com
p-com
0
100
65.0
1
1
NIL
HORIZONTAL

SLIDER
243
612
342
645
p-saf
p-saf
0
100
66.0
1
1
NIL
HORIZONTAL

SLIDER
555
612
651
645
p-tim
p-tim
0
100
62.0
1
1
NIL
HORIZONTAL

SLIDER
655
612
755
645
p-pol
p-pol
0
100
58.0
1
1
NIL
HORIZONTAL

SLIDER
18
666
129
699
p-buy2
p-buy2
0
100
71.0
1
1
NIL
HORIZONTAL

TEXTBOX
20
648
264
678
Weights for middle-income people
12
0.0
1

SLIDER
133
666
234
699
p-ope2
p-ope2
0
100
71.0
1
1
NIL
HORIZONTAL

SLIDER
238
666
338
699
p-saf2
p-saf2
0
100
63.0
1
1
NIL
HORIZONTAL

SLIDER
448
666
552
699
p-com2
p-com2
0
100
66.0
1
1
NIL
HORIZONTAL

SLIDER
555
666
654
699
p-tim2
p-tim2
0
100
61.0
1
1
NIL
HORIZONTAL

SLIDER
658
665
755
698
p-pol2
p-pol2
0
100
60.0
1
1
NIL
HORIZONTAL

SLIDER
8
204
180
237
Time-simulation
Time-simulation
1
20
10.0
1
1
NIL
HORIZONTAL

MONITOR
1147
652
1287
697
People with age in range 1
count persons with [age < 20]
0
1
11

MONITOR
1147
709
1285
754
People with age in range 2
count persons with [age >= 20 AND age <= 24]
17
1
11

MONITOR
1298
652
1436
697
People with age in range 3
count persons with [age >= 25 and age <= 29]
17
1
11

MONITOR
1297
708
1438
753
People with age in range 4
count persons with [age >= 30 and age <= 34]
17
1
11

INPUTBOX
107
137
212
197
Female-percentage
0.53
1
0
Number

MONITOR
887
810
944
855
Males
count persons with [gender = 1]
0
1
11

MONITOR
962
810
1012
855
Females
count persons with [gender = 2]
0
1
11

MONITOR
1025
812
1090
857
Socioec 1
count persons with [socioeconomic-sit = 1]
17
1
11

MONITOR
1103
812
1168
857
Socioec 2
count persons with [socioeconomic-sit = 2]
17
1
11

MONITOR
1177
812
1242
857
Socioec 3
count persons with [socioeconomic-sit = 3]
17
1
11

MONITOR
1447
647
1563
692
People with moto E1
count persons with [moto-owner = 1 AND socioeconomic-sit = 1]
17
1
11

MONITOR
1448
707
1567
752
Males with moto E1
count persons with [moto-owner = 1 AND socioeconomic-sit = 1 AND gender = 1]
17
1
11

MONITOR
1448
757
1566
802
Females with moto E1
count persons with [moto-owner = 1 AND socioeconomic-sit = 1 AND gender = 2]
17
1
11

SLIDER
9
280
181
313
alpha-uncertainty
alpha-uncertainty
0
1
0.52
0.01
1
NIL
HORIZONTAL

SLIDER
8
318
180
351
beta-colectiveness
beta-colectiveness
0
1
0.48
0.01
1
NIL
HORIZONTAL

TEXTBOX
60
356
210
374
alpha + beta = 1
11
0.0
1

INPUTBOX
10
371
87
431
deviation
0.2
1
0
Number

PLOT
1596
441
1866
620
Total Accidents
Time step
Accidents
0.0
10.0
0.0
10.0
true
true
"" ""
PENS
"Total" 1.0 0 -11085214 true "" "if (ticks mod (31)) = 0.000  [plot count persons with [safety = 1] ]"
"moto" 1.0 0 -16777216 true "" "if (ticks mod (31)) = 0.000  [plot count persons with [transport-mode = 1 and safety = 1]]"
"car" 1.0 0 -2674135 true "" "if (ticks mod (31)) = 0.000  [plot count persons with [transport-mode = 2 and safety = 1]]"
"Pub" 1.0 0 -13345367 true "" "if (ticks mod (31)) = 0.000  [plot count persons with [transport-mode = 3 and safety = 1]]"

PLOT
1597
629
1869
808
Total CO2
Time step
Kg
0.0
10.0
0.0
10.0
true
true
"" ""
PENS
"total" 1.0 0 -14439633 true "" "if (ticks mod (31)) = 0.000 [plot (sum [pollution] of persons) / 1000]"
"moto" 1.0 0 -16777216 true "" "if (ticks mod (31)) = 0.000 [plot (sum [pollution] of persons with [transport-mode = 1]) / 1000]"
"car" 1.0 0 -2674135 true "" "if (ticks mod (31)) = 0.000 [plot (sum [pollution] of persons with [transport-mode = 2]) / 1000]"
"Pub" 1.0 0 -13345367 true "" "if (ticks mod (31)) = 0.000 [plot (sum [pollution] of persons with [transport-mode = 3]) / 1000]"

PLOT
1874
629
2132
808
Average travel time
Time step
Hours
0.0
10.0
0.0
10.0
true
true
"" ""
PENS
"total" 1.0 0 -10899396 true "" "if (ticks mod (31)) = 0.000 [plot mean [time] of persons]"
"moto" 1.0 0 -16777216 true "" "if (ticks mod (31)) = 0.000 [plot mean [time] of persons with [transport-mode = 1]]\n"
"car" 1.0 0 -2674135 true "" "if (ticks mod (31)) = 0.000 [plot mean [time] of persons with [transport-mode = 2]]\n"
"pub" 1.0 0 -13345367 true "" "if (ticks mod (31)) = 0.000 [plot mean [time] of persons with [transport-mode = 3]]\n"

PLOT
1830
34
1990
154
Safety moto
NIL
NIL
0.0
1.0
0.0
0.2
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "if (ticks mod (31)) = 0.000 [plot mean [safety] of persons with [transport-mode = 1]]"

PLOT
1829
158
1989
280
Safety car
NIL
NIL
0.0
1.0
0.0
0.2
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "if (ticks mod (31)) = 0.000 [plot mean [safety] of persons with [transport-mode = 2]]"

PLOT
1829
288
1989
420
Safety pub
NIL
NIL
0.0
1.0
0.0
0.2
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "if (ticks mod (31)) = 0.000 [plot mean [safety] of persons with [transport-mode = 3]]"

PLOT
1908
440
2108
590
Pollution total
NIL
NIL
0.0
1.0
0.0
1.0
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "if (ticks mod (31)) = 0.000 [plot pollution-tot]"

MONITOR
1576
199
1647
244
Satis moto
mean [satisfaction] of persons with [transport-mode = 1]
17
1
11

MONITOR
1582
256
1647
301
Satisf car
mean [satisfaction] of persons with [transport-mode = 2]
17
1
11

MONITOR
1583
309
1646
354
satis pub
mean [satisfaction] of persons with [transport-mode = 3]
17
1
11

MONITOR
1218
27
1275
72
Rep
(count persons with [type-choice = \"repetition\"]) / population
2
1
11

MONITOR
1218
74
1275
119
Imi
(count persons with [type-choice = \"imitation\"]) / population
2
1
11

MONITOR
1218
122
1275
167
Del
(count persons with [type-choice = \"deliberation\"]) / population
2
1
11

MONITOR
1219
170
1275
215
Inq
(count persons with [type-choice = \"inquiry\"]) / population
2
1
11

PLOT
898
877
1098
1027
Porcentage decision type
NIL
NIL
0.0
1.0
0.0
1.0
true
false
"" ""
PENS
"Rep" 1.0 0 -16777216 true "" "if (ticks mod (31)) = 0.000 [plot ((count persons with [type-choice = \"repetition\"]) / population)]"
"Imi" 1.0 0 -13345367 true "" "if (ticks mod (31)) = 0.000 [plot ((count persons with [type-choice = \"imitation\"]) / population)]"
"Del" 1.0 0 -8630108 true "" "if (ticks mod (31)) = 0.000 [plot ((count persons with [type-choice = \"deliberation\"]) / population)]"
"Inq" 1.0 0 -13840069 true "" "if (ticks mod (31)) = 0.000 [plot ((count persons with [type-choice = \"inquiry\"]) / population)]"

SLIDER
35
852
68
977
buy-increase-m
buy-increase-m
0
1
0.0
0.01
1
NIL
VERTICAL

SLIDER
80
852
113
977
buy-increase-c
buy-increase-c
0
1
0.0
0.01
1
NIL
VERTICAL

TEXTBOX
38
823
188
841
Cost increments 
11
0.0
1

SLIDER
2280
899
2313
1025
fix-increase-m
fix-increase-m
0
1
0.0
0.01
1
NIL
VERTICAL

SLIDER
2324
898
2357
1025
fix-increase-c
fix-increase-c
0
1
0.0
0.01
1
NIL
VERTICAL

SLIDER
346
612
448
645
p-sec
p-sec
0
100
63.0
1
1
NIL
HORIZONTAL

SLIDER
342
666
444
699
p-sec2
p-sec2
0
100
66.0
1
1
NIL
HORIZONTAL

PLOT
1108
874
1304
1024
Motorcyclist by Gender
NIL
NIL
0.0
10.0
0.0
10.0
true
false
"" ""
PENS
"default" 1.0 0 -14070903 true "" "if (ticks mod (31)) = 0.000 [plot count persons with [gender = 1 and transport-mode = 1]]"
"pen-1" 1.0 0 -5825686 true "" "if (ticks mod (31)) = 0.000 [plot count persons with [gender = 2  and transport-mode = 1]]"

PLOT
2188
415
2348
544
Security moto
NIL
NIL
0.0
10.0
0.0
1.0
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "if (ticks mod (30)) = 0.000 [plot mean [security] of persons with [transport-mode = 1]]"

PLOT
2188
549
2348
669
Security car
NIL
NIL
0.0
10.0
0.0
1.0
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "if (ticks mod (30)) = 0.000 [plot mean [security] of persons with [transport-mode = 2]]"

PLOT
2187
679
2347
799
Security Pub
NIL
NIL
0.0
10.0
0.0
1.0
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "if (ticks mod (30)) = 0.000 [plot mean [security] of persons with [transport-mode = 3]]"

PLOT
174
814
374
964
Transport Mode Repeat
NIL
NIL
0.0
10.0
0.0
10.0
true
false
"" ""
PENS
"Mot" 1.0 0 -16777216 true "" "if (ticks mod (31)) = 0.000 [plot (count persons with [transport-mode = 1 AND type-choice = \"repetition\"])]"
"Car" 1.0 0 -2674135 true "" "if (ticks mod (31)) = 0.000 [plot (count persons with [transport-mode = 2 AND type-choice = \"repetition\"])]"
"Bus" 1.0 0 -13345367 true "" "if (ticks mod (31)) = 0.000 [plot (count persons with [transport-mode = 3 AND type-choice = \"repetition\"])]"

PLOT
385
813
585
963
Transport Mode Imitate
NIL
NIL
0.0
10.0
0.0
10.0
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "if (ticks mod (31)) = 0.000 [plot (count persons with [transport-mode = 1 AND type-choice = \"imitation\"])]"
"pen-1" 1.0 0 -2674135 true "" "if (ticks mod (31)) = 0.000 [plot (count persons with [transport-mode = 2 AND type-choice = \"imitation\"])]"
"pen-2" 1.0 0 -13345367 true "" "if (ticks mod (31)) = 0.000 [plot (count persons with [transport-mode = 3 AND type-choice = \"imitation\"])]"

PLOT
175
972
375
1122
Transport Mode Inquiry
NIL
NIL
0.0
10.0
0.0
10.0
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "if (ticks mod (31)) = 0.000 [plot (count persons with [transport-mode = 1 AND type-choice = \"inquiry\"])]"
"pen-1" 1.0 0 -2674135 true "" "if (ticks mod (31)) = 0.000 [plot (count persons with [transport-mode = 2 AND type-choice = \"inquiry\"])]"
"pen-2" 1.0 0 -13345367 true "" "if (ticks mod (31)) = 0.000 [plot (count persons with [transport-mode = 3 AND type-choice = \"inquiry\"])]"

PLOT
388
971
588
1121
Transport Mode Deliberate
NIL
NIL
0.0
10.0
0.0
10.0
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "if (ticks mod (31)) = 0.000 [plot (count persons with [transport-mode = 1 AND type-choice = \"deliberation\"])]"
"pen-1" 1.0 0 -2674135 true "" "if (ticks mod (31)) = 0.000 [plot (count persons with [transport-mode = 2 AND type-choice = \"deliberation\"])]"
"pen-2" 1.0 0 -13345367 true "" "if (ticks mod (31)) = 0.000 [plot (count persons with [transport-mode = 3 AND type-choice = \"deliberation\"])]"

MONITOR
1147
759
1285
804
People with age in range 5
count persons with [age <= 35 and age <= 39]
17
1
11

SLIDER
17
720
128
753
p-buy3
p-buy3
0
100
70.0
1
1
NIL
HORIZONTAL

SLIDER
131
720
233
753
p-ope3
p-ope3
0
100
68.0
1
1
NIL
HORIZONTAL

SLIDER
237
721
336
754
p-saf3
p-saf3
0
100
69.0
1
1
NIL
HORIZONTAL

SLIDER
341
722
442
755
p-sec3
p-sec3
0
100
71.0
1
1
NIL
HORIZONTAL

SLIDER
447
722
551
755
p-com3
p-com3
0
100
70.0
1
1
NIL
HORIZONTAL

SLIDER
554
723
652
756
p-tim3
p-tim3
0
100
63.0
1
1
NIL
HORIZONTAL

SLIDER
657
723
753
756
p-pol3
p-pol3
0
100
62.0
1
1
NIL
HORIZONTAL

TEXTBOX
22
704
198
732
Weights for high income people
12
0.0
1

PLOT
1324
873
1524
1023
Total Population 
Ticks
People
0.0
10.0
0.0
10.0
true
false
"" ""
PENS
"pen-1" 1.0 0 -14070903 true "" "plot count persons with [age > 15]"

MONITOR
1323
818
1380
863
People
count persons
17
1
11

PLOT
1542
875
1742
1025
Growth rate
NIL
NIL
0.0
10.0
0.0
0.1
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "plot population-rate"

PLOT
2178
23
2338
143
Uncertainty Moto
NIL
NIL
0.0
10.0
0.0
1.0
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "if (ticks mod (31)) = 0.000 [plot mean [security] of persons with [transport-mode = 1]]"

PLOT
2177
149
2337
271
Uncertainty Car
NIL
NIL
0.0
10.0
0.0
1.0
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "if (ticks mod (31)) = 0.000 [plot mean [security] of persons with [transport-mode = 2]]"

PLOT
2179
278
2342
402
Ucertainty Pub
NIL
NIL
0.0
10.0
0.0
1.0
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "if (ticks mod (31)) = 0.000 [plot mean [security] of persons with [transport-mode = 3]]"

PLOT
1873
827
2133
986
Total travel time
Time step
Hours
0.0
10.0
0.0
10.0
true
true
"" ""
PENS
"total" 1.0 0 -10899396 true "" "if (ticks mod (31)) = 0.000 [plot sum [time] of persons]"
"moto" 1.0 0 -16777216 true "" "if (ticks mod (31)) = 0.000 [plot sum [time] of persons with [transport-mode = 1]]"
"car" 1.0 0 -2674135 true "" "if (ticks mod (31)) = 0.000 [plot sum [time] of persons with [transport-mode = 2]]"
"pub" 1.0 0 -13345367 true "" "if (ticks mod (31)) = 0.000 [plot sum [time] of persons with [transport-mode = 3]]"

@#$#@#$#@
## WHAT IS IT?

(a general understanding of what the model is trying to show or explain)

## HOW IT WORKS

(what rules the agents use to create the overall behavior of the model)

## HOW TO USE IT

(how to use the model, including a description of each of the items in the Interface tab)

## THINGS TO NOTICE

(suggested things for the user to notice while running the model)

## THINGS TO TRY

(suggested things for the user to try to do (move sliders, switches, etc.) with the model)

## EXTENDING THE MODEL

(suggested things to add or change in the Code tab to make the model more complicated, detailed, accurate, etc.)

## NETLOGO FEATURES

(interesting or unusual features of NetLogo that the model uses, particularly in the Code tab; or where workarounds were needed for missing features)

## RELATED MODELS

(models in the NetLogo Models Library and elsewhere which are of related interest)

## CREDITS AND REFERENCES

(a reference to the model's URL on the web if it has one, as well as any other necessary credits, citations, and links)
@#$#@#$#@
default
true
0
Polygon -7500403 true true 150 5 40 250 150 205 260 250

airplane
true
0
Polygon -7500403 true true 150 0 135 15 120 60 120 105 15 165 15 195 120 180 135 240 105 270 120 285 150 270 180 285 210 270 165 240 180 180 285 195 285 165 180 105 180 60 165 15

arrow
true
0
Polygon -7500403 true true 150 0 0 150 105 150 105 293 195 293 195 150 300 150

box
false
0
Polygon -7500403 true true 150 285 285 225 285 75 150 135
Polygon -7500403 true true 150 135 15 75 150 15 285 75
Polygon -7500403 true true 15 75 15 225 150 285 150 135
Line -16777216 false 150 285 150 135
Line -16777216 false 150 135 15 75
Line -16777216 false 150 135 285 75

bug
true
0
Circle -7500403 true true 96 182 108
Circle -7500403 true true 110 127 80
Circle -7500403 true true 110 75 80
Line -7500403 true 150 100 80 30
Line -7500403 true 150 100 220 30

butterfly
true
0
Polygon -7500403 true true 150 165 209 199 225 225 225 255 195 270 165 255 150 240
Polygon -7500403 true true 150 165 89 198 75 225 75 255 105 270 135 255 150 240
Polygon -7500403 true true 139 148 100 105 55 90 25 90 10 105 10 135 25 180 40 195 85 194 139 163
Polygon -7500403 true true 162 150 200 105 245 90 275 90 290 105 290 135 275 180 260 195 215 195 162 165
Polygon -16777216 true false 150 255 135 225 120 150 135 120 150 105 165 120 180 150 165 225
Circle -16777216 true false 135 90 30
Line -16777216 false 150 105 195 60
Line -16777216 false 150 105 105 60

car
false
0
Polygon -7500403 true true 300 180 279 164 261 144 240 135 226 132 213 106 203 84 185 63 159 50 135 50 75 60 0 150 0 165 0 225 300 225 300 180
Circle -16777216 true false 180 180 90
Circle -16777216 true false 30 180 90
Polygon -16777216 true false 162 80 132 78 134 135 209 135 194 105 189 96 180 89
Circle -7500403 true true 47 195 58
Circle -7500403 true true 195 195 58

circle
false
0
Circle -7500403 true true 0 0 300

circle 2
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240

cow
false
0
Polygon -7500403 true true 200 193 197 249 179 249 177 196 166 187 140 189 93 191 78 179 72 211 49 209 48 181 37 149 25 120 25 89 45 72 103 84 179 75 198 76 252 64 272 81 293 103 285 121 255 121 242 118 224 167
Polygon -7500403 true true 73 210 86 251 62 249 48 208
Polygon -7500403 true true 25 114 16 195 9 204 23 213 25 200 39 123

cylinder
false
0
Circle -7500403 true true 0 0 300

dot
false
0
Circle -7500403 true true 90 90 120

face happy
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 255 90 239 62 213 47 191 67 179 90 203 109 218 150 225 192 218 210 203 227 181 251 194 236 217 212 240

face neutral
false
0
Circle -7500403 true true 8 7 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Rectangle -16777216 true false 60 195 240 225

face sad
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 168 90 184 62 210 47 232 67 244 90 220 109 205 150 198 192 205 210 220 227 242 251 229 236 206 212 183

fish
false
0
Polygon -1 true false 44 131 21 87 15 86 0 120 15 150 0 180 13 214 20 212 45 166
Polygon -1 true false 135 195 119 235 95 218 76 210 46 204 60 165
Polygon -1 true false 75 45 83 77 71 103 86 114 166 78 135 60
Polygon -7500403 true true 30 136 151 77 226 81 280 119 292 146 292 160 287 170 270 195 195 210 151 212 30 166
Circle -16777216 true false 215 106 30

flag
false
0
Rectangle -7500403 true true 60 15 75 300
Polygon -7500403 true true 90 150 270 90 90 30
Line -7500403 true 75 135 90 135
Line -7500403 true 75 45 90 45

flower
false
0
Polygon -10899396 true false 135 120 165 165 180 210 180 240 150 300 165 300 195 240 195 195 165 135
Circle -7500403 true true 85 132 38
Circle -7500403 true true 130 147 38
Circle -7500403 true true 192 85 38
Circle -7500403 true true 85 40 38
Circle -7500403 true true 177 40 38
Circle -7500403 true true 177 132 38
Circle -7500403 true true 70 85 38
Circle -7500403 true true 130 25 38
Circle -7500403 true true 96 51 108
Circle -16777216 true false 113 68 74
Polygon -10899396 true false 189 233 219 188 249 173 279 188 234 218
Polygon -10899396 true false 180 255 150 210 105 210 75 240 135 240

house
false
0
Rectangle -7500403 true true 45 120 255 285
Rectangle -16777216 true false 120 210 180 285
Polygon -7500403 true true 15 120 150 15 285 120
Line -16777216 false 30 120 270 120

leaf
false
0
Polygon -7500403 true true 150 210 135 195 120 210 60 210 30 195 60 180 60 165 15 135 30 120 15 105 40 104 45 90 60 90 90 105 105 120 120 120 105 60 120 60 135 30 150 15 165 30 180 60 195 60 180 120 195 120 210 105 240 90 255 90 263 104 285 105 270 120 285 135 240 165 240 180 270 195 240 210 180 210 165 195
Polygon -7500403 true true 135 195 135 240 120 255 105 255 105 285 135 285 165 240 165 195

line
true
0
Line -7500403 true 150 0 150 300

line half
true
0
Line -7500403 true 150 0 150 150

pentagon
false
0
Polygon -7500403 true true 150 15 15 120 60 285 240 285 285 120

person
false
0
Circle -7500403 true true 110 5 80
Polygon -7500403 true true 105 90 120 195 90 285 105 300 135 300 150 225 165 300 195 300 210 285 180 195 195 90
Rectangle -7500403 true true 127 79 172 94
Polygon -7500403 true true 195 90 240 150 225 180 165 105
Polygon -7500403 true true 105 90 60 150 75 180 135 105

plant
false
0
Rectangle -7500403 true true 135 90 165 300
Polygon -7500403 true true 135 255 90 210 45 195 75 255 135 285
Polygon -7500403 true true 165 255 210 210 255 195 225 255 165 285
Polygon -7500403 true true 135 180 90 135 45 120 75 180 135 210
Polygon -7500403 true true 165 180 165 210 225 180 255 120 210 135
Polygon -7500403 true true 135 105 90 60 45 45 75 105 135 135
Polygon -7500403 true true 165 105 165 135 225 105 255 45 210 60
Polygon -7500403 true true 135 90 120 45 150 15 180 45 165 90

sheep
false
15
Circle -1 true true 203 65 88
Circle -1 true true 70 65 162
Circle -1 true true 150 105 120
Polygon -7500403 true false 218 120 240 165 255 165 278 120
Circle -7500403 true false 214 72 67
Rectangle -1 true true 164 223 179 298
Polygon -1 true true 45 285 30 285 30 240 15 195 45 210
Circle -1 true true 3 83 150
Rectangle -1 true true 65 221 80 296
Polygon -1 true true 195 285 210 285 210 240 240 210 195 210
Polygon -7500403 true false 276 85 285 105 302 99 294 83
Polygon -7500403 true false 219 85 210 105 193 99 201 83

square
false
0
Rectangle -7500403 true true 30 30 270 270

square 2
false
0
Rectangle -7500403 true true 30 30 270 270
Rectangle -16777216 true false 60 60 240 240

star
false
0
Polygon -7500403 true true 151 1 185 108 298 108 207 175 242 282 151 216 59 282 94 175 3 108 116 108

target
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240
Circle -7500403 true true 60 60 180
Circle -16777216 true false 90 90 120
Circle -7500403 true true 120 120 60

tree
false
0
Circle -7500403 true true 118 3 94
Rectangle -6459832 true false 120 195 180 300
Circle -7500403 true true 65 21 108
Circle -7500403 true true 116 41 127
Circle -7500403 true true 45 90 120
Circle -7500403 true true 104 74 152

triangle
false
0
Polygon -7500403 true true 150 30 15 255 285 255

triangle 2
false
0
Polygon -7500403 true true 150 30 15 255 285 255
Polygon -16777216 true false 151 99 225 223 75 224

truck
false
0
Rectangle -7500403 true true 4 45 195 187
Polygon -7500403 true true 296 193 296 150 259 134 244 104 208 104 207 194
Rectangle -1 true false 195 60 195 105
Polygon -16777216 true false 238 112 252 141 219 141 218 112
Circle -16777216 true false 234 174 42
Rectangle -7500403 true true 181 185 214 194
Circle -16777216 true false 144 174 42
Circle -16777216 true false 24 174 42
Circle -7500403 false true 24 174 42
Circle -7500403 false true 144 174 42
Circle -7500403 false true 234 174 42

turtle
true
0
Polygon -10899396 true false 215 204 240 233 246 254 228 266 215 252 193 210
Polygon -10899396 true false 195 90 225 75 245 75 260 89 269 108 261 124 240 105 225 105 210 105
Polygon -10899396 true false 105 90 75 75 55 75 40 89 31 108 39 124 60 105 75 105 90 105
Polygon -10899396 true false 132 85 134 64 107 51 108 17 150 2 192 18 192 52 169 65 172 87
Polygon -10899396 true false 85 204 60 233 54 254 72 266 85 252 107 210
Polygon -7500403 true true 119 75 179 75 209 101 224 135 220 225 175 261 128 261 81 224 74 135 88 99

wheel
false
0
Circle -7500403 true true 3 3 294
Circle -16777216 true false 30 30 240
Line -7500403 true 150 285 150 15
Line -7500403 true 15 150 285 150
Circle -7500403 true true 120 120 60
Line -7500403 true 216 40 79 269
Line -7500403 true 40 84 269 221
Line -7500403 true 40 216 269 79
Line -7500403 true 84 40 221 269

wolf
false
0
Polygon -16777216 true false 253 133 245 131 245 133
Polygon -7500403 true true 2 194 13 197 30 191 38 193 38 205 20 226 20 257 27 265 38 266 40 260 31 253 31 230 60 206 68 198 75 209 66 228 65 243 82 261 84 268 100 267 103 261 77 239 79 231 100 207 98 196 119 201 143 202 160 195 166 210 172 213 173 238 167 251 160 248 154 265 169 264 178 247 186 240 198 260 200 271 217 271 219 262 207 258 195 230 192 198 210 184 227 164 242 144 259 145 284 151 277 141 293 140 299 134 297 127 273 119 270 105
Polygon -7500403 true true -1 195 14 180 36 166 40 153 53 140 82 131 134 133 159 126 188 115 227 108 236 102 238 98 268 86 269 92 281 87 269 103 269 113

x
false
0
Polygon -7500403 true true 270 75 225 30 30 225 75 270
Polygon -7500403 true true 30 75 75 30 270 225 225 270
@#$#@#$#@
NetLogo 6.3.0
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
<experiments>
  <experiment name="Base case" repetitions="100" runMetricsEveryStep="true">
    <setup>setup</setup>
    <go>go</go>
    <timeLimit steps="600"/>
    <metric>count persons with [transport-mode = 1]</metric>
    <metric>count persons with [transport-mode = 2]</metric>
    <metric>count persons with [transport-mode = 3]</metric>
    <metric>count persons with [type-choice = "repetition"]</metric>
    <metric>count persons with [type-choice = "imitation"]</metric>
    <metric>count persons with [type-choice = "deliberation"]</metric>
    <metric>count persons with [type-choice = "inquiry"]</metric>
    <metric>mean [time] of persons with [transport-mode = 1]</metric>
    <metric>mean [time] of persons with [transport-mode = 2]</metric>
    <metric>mean [time] of persons with [transport-mode = 3]</metric>
    <metric>count persons with [safety = 1 and transport-mode = 1]</metric>
    <metric>count persons with [safety = 1 and transport-mode = 2]</metric>
    <metric>count persons with [safety = 1 and transport-mode = 3]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 1]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 2]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 3]</metric>
  </experiment>
  <experiment name="Costs buy" repetitions="100" runMetricsEveryStep="true">
    <setup>setup</setup>
    <go>go</go>
    <timeLimit steps="610"/>
    <metric>count persons with [transport-mode = 1]</metric>
    <metric>count persons with [transport-mode = 2]</metric>
    <metric>count persons with [transport-mode = 3]</metric>
    <metric>count persons with [type-choice = "repetition"]</metric>
    <metric>count persons with [type-choice = "imitation"]</metric>
    <metric>count persons with [type-choice = "deliberation"]</metric>
    <metric>count persons with [type-choice = "inquiry"]</metric>
    <metric>mean [satisfaction] of persons</metric>
    <metric>mean [uncertainty] of persons</metric>
    <metric>sum [time] of persons with [transport-mode = 1]</metric>
    <metric>sum [time] of persons with [transport-mode = 2]</metric>
    <metric>sum [time] of persons with [transport-mode = 3]</metric>
    <metric>count persons with [safety = 1 and transport-mode = 1]</metric>
    <metric>count persons with [safety = 1 and transport-mode = 2]</metric>
    <metric>count persons with [safety = 1 and transport-mode = 3]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 1]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 2]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 3]</metric>
    <enumeratedValueSet variable="p-buy">
      <value value="100"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-buy2">
      <value value="100"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-ope">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-ope2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-saf">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-saf2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-com">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-com2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-tim">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-tim2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-pol">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-pol2">
      <value value="0"/>
    </enumeratedValueSet>
  </experiment>
  <experiment name="Costs op" repetitions="100" runMetricsEveryStep="true">
    <setup>setup</setup>
    <go>go</go>
    <timeLimit steps="610"/>
    <metric>count persons with [transport-mode = 1]</metric>
    <metric>count persons with [transport-mode = 2]</metric>
    <metric>count persons with [transport-mode = 3]</metric>
    <metric>count persons with [type-choice = "repetition"]</metric>
    <metric>count persons with [type-choice = "imitation"]</metric>
    <metric>count persons with [type-choice = "deliberation"]</metric>
    <metric>count persons with [type-choice = "inquiry"]</metric>
    <metric>mean [satisfaction] of persons</metric>
    <metric>mean [uncertainty] of persons</metric>
    <metric>sum [time] of persons with [transport-mode = 1]</metric>
    <metric>sum [time] of persons with [transport-mode = 2]</metric>
    <metric>sum [time] of persons with [transport-mode = 3]</metric>
    <metric>count persons with [safety = 1 and transport-mode = 1]</metric>
    <metric>count persons with [safety = 1 and transport-mode = 2]</metric>
    <metric>count persons with [safety = 1 and transport-mode = 3]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 1]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 2]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 3]</metric>
    <enumeratedValueSet variable="p-buy">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-buy2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-ope">
      <value value="100"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-ope2">
      <value value="100"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-saf">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-saf2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-com">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-com2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-tim">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-tim2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-pol">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-pol2">
      <value value="0"/>
    </enumeratedValueSet>
  </experiment>
  <experiment name="Saf" repetitions="100" runMetricsEveryStep="true">
    <setup>setup</setup>
    <go>go</go>
    <timeLimit steps="610"/>
    <metric>count persons with [transport-mode = 1]</metric>
    <metric>count persons with [transport-mode = 2]</metric>
    <metric>count persons with [transport-mode = 3]</metric>
    <metric>count persons with [type-choice = "repetition"]</metric>
    <metric>count persons with [type-choice = "imitation"]</metric>
    <metric>count persons with [type-choice = "deliberation"]</metric>
    <metric>count persons with [type-choice = "inquiry"]</metric>
    <metric>mean [satisfaction] of persons</metric>
    <metric>mean [uncertainty] of persons</metric>
    <metric>sum [time] of persons with [transport-mode = 1]</metric>
    <metric>sum [time] of persons with [transport-mode = 2]</metric>
    <metric>sum [time] of persons with [transport-mode = 3]</metric>
    <metric>count persons with [safety = 1 and transport-mode = 1]</metric>
    <metric>count persons with [safety = 1 and transport-mode = 2]</metric>
    <metric>count persons with [safety = 1 and transport-mode = 3]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 1]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 2]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 3]</metric>
    <enumeratedValueSet variable="p-buy">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-buy2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-ope">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-ope2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-saf">
      <value value="100"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-saf2">
      <value value="100"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-com">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-com2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-tim">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-tim2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-pol">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-pol2">
      <value value="0"/>
    </enumeratedValueSet>
  </experiment>
  <experiment name="Com" repetitions="100" runMetricsEveryStep="true">
    <setup>setup</setup>
    <go>go</go>
    <timeLimit steps="610"/>
    <metric>count persons with [transport-mode = 1]</metric>
    <metric>count persons with [transport-mode = 2]</metric>
    <metric>count persons with [transport-mode = 3]</metric>
    <metric>count persons with [type-choice = "repetition"]</metric>
    <metric>count persons with [type-choice = "imitation"]</metric>
    <metric>count persons with [type-choice = "deliberation"]</metric>
    <metric>count persons with [type-choice = "inquiry"]</metric>
    <metric>mean [satisfaction] of persons</metric>
    <metric>mean [uncertainty] of persons</metric>
    <metric>sum [time] of persons with [transport-mode = 1]</metric>
    <metric>sum [time] of persons with [transport-mode = 2]</metric>
    <metric>sum [time] of persons with [transport-mode = 3]</metric>
    <metric>count persons with [safety = 1 and transport-mode = 1]</metric>
    <metric>count persons with [safety = 1 and transport-mode = 2]</metric>
    <metric>count persons with [safety = 1 and transport-mode = 3]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 1]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 2]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 3]</metric>
    <enumeratedValueSet variable="p-buy">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-buy2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-ope">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-ope2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-saf">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-saf2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-com">
      <value value="100"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-com2">
      <value value="100"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-tim">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-tim2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-pol">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-pol2">
      <value value="0"/>
    </enumeratedValueSet>
  </experiment>
  <experiment name="Time" repetitions="100" runMetricsEveryStep="true">
    <setup>setup</setup>
    <go>go</go>
    <timeLimit steps="610"/>
    <metric>count persons with [transport-mode = 1]</metric>
    <metric>count persons with [transport-mode = 2]</metric>
    <metric>count persons with [transport-mode = 3]</metric>
    <metric>count persons with [type-choice = "repetition"]</metric>
    <metric>count persons with [type-choice = "imitation"]</metric>
    <metric>count persons with [type-choice = "deliberation"]</metric>
    <metric>count persons with [type-choice = "inquiry"]</metric>
    <metric>mean [satisfaction] of persons</metric>
    <metric>mean [uncertainty] of persons</metric>
    <metric>sum [time] of persons with [transport-mode = 1]</metric>
    <metric>sum [time] of persons with [transport-mode = 2]</metric>
    <metric>sum [time] of persons with [transport-mode = 3]</metric>
    <metric>count persons with [safety = 1 and transport-mode = 1]</metric>
    <metric>count persons with [safety = 1 and transport-mode = 2]</metric>
    <metric>count persons with [safety = 1 and transport-mode = 3]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 1]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 2]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 3]</metric>
    <enumeratedValueSet variable="p-buy">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-buy2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-ope">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-ope2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-saf">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-saf2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-com">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-com2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-tim">
      <value value="100"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-tim2">
      <value value="100"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-pol">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-pol2">
      <value value="0"/>
    </enumeratedValueSet>
  </experiment>
  <experiment name="Poll" repetitions="100" runMetricsEveryStep="true">
    <setup>setup</setup>
    <go>go</go>
    <timeLimit steps="610"/>
    <metric>count persons with [transport-mode = 1]</metric>
    <metric>count persons with [transport-mode = 2]</metric>
    <metric>count persons with [transport-mode = 3]</metric>
    <metric>count persons with [type-choice = "repetition"]</metric>
    <metric>count persons with [type-choice = "imitation"]</metric>
    <metric>count persons with [type-choice = "deliberation"]</metric>
    <metric>count persons with [type-choice = "inquiry"]</metric>
    <metric>mean [satisfaction] of persons</metric>
    <metric>mean [uncertainty] of persons</metric>
    <metric>sum [time] of persons with [transport-mode = 1]</metric>
    <metric>sum [time] of persons with [transport-mode = 2]</metric>
    <metric>sum [time] of persons with [transport-mode = 3]</metric>
    <metric>count persons with [safety = 1 and transport-mode = 1]</metric>
    <metric>count persons with [safety = 1 and transport-mode = 2]</metric>
    <metric>count persons with [safety = 1 and transport-mode = 3]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 1]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 2]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 3]</metric>
    <enumeratedValueSet variable="p-buy">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-buy2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-ope">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-ope2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-saf">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-saf2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-com">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-com2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-tim">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-tim2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-pol">
      <value value="100"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-pol2">
      <value value="100"/>
    </enumeratedValueSet>
  </experiment>
  <experiment name="Sec" repetitions="100" runMetricsEveryStep="true">
    <setup>setup</setup>
    <go>go</go>
    <timeLimit steps="610"/>
    <metric>count persons with [transport-mode = 1]</metric>
    <metric>count persons with [transport-mode = 2]</metric>
    <metric>count persons with [transport-mode = 3]</metric>
    <metric>count persons with [type-choice = "repetition"]</metric>
    <metric>count persons with [type-choice = "imitation"]</metric>
    <metric>count persons with [type-choice = "deliberation"]</metric>
    <metric>count persons with [type-choice = "inquiry"]</metric>
    <metric>mean [satisfaction] of persons</metric>
    <metric>mean [uncertainty] of persons</metric>
    <metric>sum [time] of persons with [transport-mode = 1]</metric>
    <metric>sum [time] of persons with [transport-mode = 2]</metric>
    <metric>sum [time] of persons with [transport-mode = 3]</metric>
    <metric>count persons with [safety = 1 and transport-mode = 1]</metric>
    <metric>count persons with [safety = 1 and transport-mode = 2]</metric>
    <metric>count persons with [safety = 1 and transport-mode = 3]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 1]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 2]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 3]</metric>
    <enumeratedValueSet variable="p-buy">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-buy2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-ope">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-ope2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-saf">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-saf2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-sec">
      <value value="100"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-sec2">
      <value value="100"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-com">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-com2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-tim">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-tim2">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-pol">
      <value value="0"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="p-pol2">
      <value value="0"/>
    </enumeratedValueSet>
  </experiment>
  <experiment name="Base case validation" repetitions="50" runMetricsEveryStep="true">
    <setup>setup</setup>
    <go>go</go>
    <timeLimit steps="301"/>
    <metric>count persons</metric>
    <metric>(count persons with [transport-mode = 1]) / (count persons)</metric>
    <metric>(count persons with [transport-mode = 2]) / (count persons)</metric>
    <metric>(count persons with [transport-mode = 3]) / (count persons)</metric>
    <metric>count persons with [type-choice = "repetition"]</metric>
    <metric>count persons with [type-choice = "imitation"]</metric>
    <metric>count persons with [type-choice = "deliberation"]</metric>
    <metric>count persons with [type-choice = "inquiry"]</metric>
    <metric>mean [satisfaction] of persons with [transport-mode = 1]</metric>
    <metric>mean [satisfaction] of persons with [transport-mode = 2]</metric>
    <metric>mean [satisfaction] of persons with [transport-mode = 3]</metric>
    <metric>mean [satisfaction] of persons</metric>
    <metric>mean [uncertainty] of persons with [transport-mode = 1]</metric>
    <metric>mean [uncertainty] of persons with [transport-mode = 2]</metric>
    <metric>mean [uncertainty] of persons with [transport-mode = 3]</metric>
    <metric>mean [uncertainty] of persons</metric>
    <metric>count persons with [safety = 1 and transport-mode = 1]</metric>
    <metric>count persons with [safety = 1 and transport-mode = 2]</metric>
    <metric>count persons with [safety = 1 and transport-mode = 3]</metric>
    <metric>count persons with [safety = 1]</metric>
    <metric>count persons with [security = 1 and transport-mode = 1]</metric>
    <metric>count persons with [security = 1 and transport-mode = 2]</metric>
    <metric>count persons with [security = 1 and transport-mode = 3]</metric>
    <metric>count persons with [security = 1]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 1]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 2]</metric>
    <metric>sum [pollution] of persons with [transport-mode = 3]</metric>
    <metric>sum [pollution] of persons</metric>
    <metric>sum [time] of persons with [transport-mode = 1]</metric>
    <metric>sum [time] of persons with [transport-mode = 2]</metric>
    <metric>sum [time] of persons with [transport-mode = 3]</metric>
    <metric>sum [time] of persons</metric>
    <metric>mean [time] of persons with [transport-mode = 1]</metric>
    <metric>mean [time] of persons with [transport-mode = 2]</metric>
    <metric>mean [time] of persons with [transport-mode = 3]</metric>
    <metric>mean [time] of persons</metric>
  </experiment>
</experiments>
@#$#@#$#@
@#$#@#$#@
default
0.0
-0.2 0 0.0 1.0
0.0 1 1.0 0.0
0.2 0 0.0 1.0
link direction
true
0
Line -7500403 true 150 150 90 180
Line -7500403 true 150 150 210 180

road
0.0
-0.2 0 0.0 1.0
0.0 1 1.0 0.0
0.2 0 0.0 1.0
link direction
true
0
Line -7500403 true 150 150 90 180
Line -7500403 true 150 150 210 180
@#$#@#$#@
0
@#$#@#$#@
